<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CPP Notes</title>
    <link href="/2024/12/10/CPP%20Notes/"/>
    <url>/2024/12/10/CPP%20Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="struct和class的区别"><a href="#struct和class的区别" class="headerlink" title="struct和class的区别"></a>struct和class的区别</h1><p>struct等同于class</p><p>但是区别在于：struct的默认访问权限是public，class的默认访问权限是private。</p><p>一般情况下，struct会用来定义函数对象</p><h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><p>构造函数是一个特殊的成员函数</p><p>构造函数的形式：</p><p>​与类名相同<br>​没有返回值，即使void也不能有</p><p>构造函数的作用：用来初始化数据成员</p><h1 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h1><p>自己动手：调用构造函数的时候，打印出来（无参）</p><p>当类中显示调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>这里的内容将不会执行<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>当类中显式调用构造函数时，系统不会再自动提供默认构造函数</p><p>如果还希望能够通过默认构造函数创建对象，则必须要手动显式提供一个默认构造函数。 </p><p>自己动手：以一当三 构造函数</p><h1 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h1><p>C++对象的创建分为两个阶段</p><ol><li>初始化阶段</li><li>计算阶段</li></ol><p>初始化列表的形式位于构造函数的形参列表之后，大括号（函数执行体）之前的位置，用冒号进行分割。对于多个数据成员，中间用逗号进行分隔。</p><p>自己动手：初始化列表（有多个的时候，一行写一个）<br>注意：数据成员的初始化，与其初始化列表中的初始化顺序无关，只与其在类中被声明的顺序有关，会按其在类中被声明的顺序进行初始化</p><h1 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h1><p>析构函数的形式</p><p>​与类目相同<br>​但要在其前面加上一个波浪号~<br>​没有返回值，即使是void也不能有<br>​没有参数<br>​只有一个</p><p>析构函数的作用：用来清理对象中的数据成员所申请的资源</p><p>当对象被销毁时，析构函数会自动调用</p><p>当类中没有显示定义析构函数的时候，系统会自动提供一个析构函数</p><p>成员函数不占据类型的存储空间，他们都存放在程序代码区</p><p>申请了堆空间的资源，要手动销毁，销毁后指针要指向空指针</p><p>自己动手：将之前申请的资源销毁一下</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm Questions</title>
    <link href="/2024/12/05/Algorithm%20Questions/"/>
    <url>/2024/12/05/Algorithm%20Questions/</url>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是一种高效的排序算法，发明于1960年，由英国计算机科学家Tony Hoare提出。采用了分治法的思想，通过不断地将待排序序列划分为两部分，然后对这两部分分别进行排序，从而达到整个序列有序的目的。</p><p><strong>快速排序的基本思想和过程</strong></p><ol><li>选择基准值（Pivot）：从待排序序列中选择一个元素作为基准值。基准值的选择有多种方法，如选择第一个元素、最后一个元素、中间元素或随机元素。不同的选择方法在实际应用中可能导致算法性能的差异。</li><li>划分子数组（Partitioning）：将待排序序列划分为两个子数组，一个包含小于基准值的元素，另一个包含大于基准值的元素。划分过程中会将基准值放到合适的位置，这个位置即为基准值在已排序序列中的最终位置。</li><li>递归排序子数组：对两个子数组分别递归地执行快速排序。由于子数组的大小在每次递归调用时都会减少，所以这个过程会逐渐递归到只剩下一个元素，此时递归终止。</li></ol><p>快速排序的核心在于划分子数组（Partitioning）的过程。通常采用双指针法实现：</p><ol><li>初始化两个指针 i 和 j，分别指向序列的起始位置和结束位置。</li><li>将基准值与指针 j 所指的元素进行比较。如果指针 j 所指的元素大于等于基准值，则将 j 往左移动一位；否则，将指针 j 所指的元素赋值给指针 i 所指的位置，同时将 i 右移一位。</li><li>接下来，将基准值与指针 i 所指的元素进行比较。如果指针 i 所指的元素小于等于基准值，则将 i 往右移动一位；否则，将指针 i 所指的元素赋值给指针 j 所指的位置，同时将 j 左移一位。</li><li>重复步骤2和3，直到 i 和 j 相遇。此时，将基准值放置在 i（或 j）所指的位置。至此，基准值左边的元素都小于等于基准值，右边的元素都大于等于基准值。</li><li>返回基准值所在的索引。这个索引将用于划分子数组，进入下一次递归。</li></ol><p>快速排序在最优情况下具有 O(nlogn)的时间复杂度，这是因为在每次划分过程中，如果基准值能将数组均匀地分成两部分，那么递归树的深度就是log(n)。每层递归树需要处理的元素总数是n，因此总的时间复杂度为O(nlogn)。</p><p>在最坏情况下，快速排序的时间复杂度为O(n^2)。这种情况发生在待排序序列已经是升序或降序排列，且每次选择的基准值都是最大或最小的元素时。这会导致递归树极度不平衡，最大深度达到n。为了避免这种情况，通常采用随机选取基准值的方法，使得算法在实际应用中的表现更加稳定。</p><p><strong>快速排序的优点</strong></p><ol><li>在平均情况下，具有较高的排序效率，时间复杂度为O(nlogn)；</li><li>原地排序，不需要额外的存储空间，空间复杂度为O(logn)，这是由于递归调用栈的深度；</li><li>比其他排序算法（如归并排序）具有更好的缓存性能，因为它使用的是局部性原理。</li></ol><p><strong>快速排序的缺点</strong></p><ol><li>在最坏情况下，时间复杂度为O(n^2)，但这可以通过随机选取基准值的方法来改善；</li><li>对于小数组，快速排序的性能可能不如插入排序等简单排序算法。因此，实际应用中，快速排序通常与其他排序算法结合使用，例如在递归到较小子数组时切换到插入排序。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>        <span class="hljs-type">int</span> pivotIndex = <span class="hljs-built_in">partition</span>(arr, low, high);<br>        <span class="hljs-built_in">quickSort</span>(arr, low, pivotIndex - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">quickSort</span>(arr, pivotIndex + <span class="hljs-number">1</span>, high);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>&#123;<br>    <span class="hljs-type">int</span> pivot = arr[low];<br>    <span class="hljs-type">int</span> i = low, j = high;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot) &#123;<br>            j--;<br>        &#125;<br>        arr[i] = arr[j];<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) &#123;<br>            i++;<br>        &#125;<br>        arr[j] = arr[i];<br>    &#125;<br>    arr[i] = pivot;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">quickSort</span>(arr, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIND PALACE</title>
    <link href="/2024/12/05/Diary/"/>
    <url>/2024/12/05/Diary/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，你还无法进入。" data-whm="抱歉，不要硬来噢，去其他地方看看吧。">  <script id="hbeData" type="hbeData" data-hmacdigest="a6ccbeac0b90a1e63b6308ea925d123ad321771c655096b5937fa1cc232363e1">630e18ecb6079916edb310f9273e5d631515cd9113cc9ceca966990ab86d38dcb218c02cafc16515ea104355585bf012093e7c5b2d62db2588e1d7b3f4934fa8188c7868de3765766cdc34ed2366c347df66fc5b6d888a160e01328971accf4e836b0a543c4d5eff724491261ea8960da06271b9a300a75cee7d7675bb54f6d726e307604337e59c632b4e24ed9eaed76c2f050c050ee3b46fae2a10ae767be7588d4c6a58e08ece9936be35a3f537525a6f136ebfe4c21e192057ca2efc6ea8a082a906e45d9f7426e79e03ae3572b036e34878cf4d7f524b086e3a6b17d786</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你还记得最快乐的时光吗？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>迷雾森林</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Guitar Tablature</title>
    <link href="/2024/12/04/Guitar%20Tablature/"/>
    <url>/2024/12/04/Guitar%20Tablature/</url>
    
    <content type="html"><![CDATA[<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h2 id="带我走"><a href="#带我走" class="headerlink" title="带我走"></a>带我走</h2><p>排版图：</p><img src="/2024/12/04/Guitar%20Tablature/%E5%B8%A6%E6%88%91%E8%B5%B0.png" class="" title="带我走"><img src="/2024/12/04/Guitar%20Tablature/%E5%B8%A6%E6%88%91%E8%B5%B01.png" class="" title="带我走1"><img src="/2024/12/04/Guitar%20Tablature/%E5%B8%A6%E6%88%91%E8%B5%B02-17332967483168.png" class="" title="带我走2"><img src="/2024/12/04/Guitar%20Tablature/%E5%B8%A6%E6%88%91%E8%B5%B03.png" class="" title="带我走3"><h1 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h1><h2 id="这是我一生中最勇敢的瞬间"><a href="#这是我一生中最勇敢的瞬间" class="headerlink" title="这是我一生中最勇敢的瞬间"></a>这是我一生中最勇敢的瞬间</h2><p>排版图：</p><img src="/2024/12/04/Guitar%20Tablature/%E8%BF%99%E6%98%AF%E6%88%91%E4%B8%80%E7%94%9F%E4%B8%AD%E6%9C%80%E5%8B%87%E6%95%A2%E7%9A%84%E7%9E%AC%E9%97%B4.png" class="" title="这是我一生中最勇敢的瞬间"><img src="/2024/12/04/Guitar%20Tablature/%E8%BF%99%E6%98%AF%E6%88%91%E4%B8%80%E7%94%9F%E4%B8%AD%E6%9C%80%E5%8B%87%E6%95%A2%E7%9A%84%E7%9E%AC%E9%97%B41.png" class="" title="这是我一生中最勇敢的瞬间1"><img src="/2024/12/04/Guitar%20Tablature/%E8%BF%99%E6%98%AF%E6%88%91%E4%B8%80%E7%94%9F%E4%B8%AD%E6%9C%80%E5%8B%87%E6%95%A2%E7%9A%84%E7%9E%AC%E9%97%B42.png" class="" title="这是我一生中最勇敢的瞬间2"><img src="/2024/12/04/Guitar%20Tablature/%E8%BF%99%E6%98%AF%E6%88%91%E4%B8%80%E7%94%9F%E4%B8%AD%E6%9C%80%E5%8B%87%E6%95%A2%E7%9A%84%E7%9E%AC%E9%97%B43.png" class="" title="这是我一生中最勇敢的瞬间3"><img src="/2024/12/04/Guitar%20Tablature/%E8%BF%99%E6%98%AF%E6%88%91%E4%B8%80%E7%94%9F%E4%B8%AD%E6%9C%80%E5%8B%87%E6%95%A2%E7%9A%84%E7%9E%AC%E9%97%B44.png" class="" title="这是我一生中最勇敢的瞬间4"><blockquote><p>原图链接：</p><p><a href="http://www.kouqinpu.cn/uploadfile/202202/6c4a71d96731e20.png">这是我一生中最勇敢的瞬间1</a></p><p><a href="http://www.kouqinpu.cn/uploadfile/202202/d2b368a8cafbb5b.png">这是我一生中最勇敢的瞬间2</a></p><p><a href="http://www.kouqinpu.cn/uploadfile/202202/6827b9ad8342b73.png">这是我一生中最勇敢的瞬间3</a></p><p><a href="http://www.kouqinpu.cn/uploadfile/202202/8b03bef8de5a4e2.png">这是我一生中最勇敢的瞬间4</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>吉他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>吉他谱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Solutions of Everything</title>
    <link href="/2024/12/04/Solutions%20of%20Everything/"/>
    <url>/2024/12/04/Solutions%20of%20Everything/</url>
    
    <content type="html"><![CDATA[<h1 id="Solutions-of-Everything"><a href="#Solutions-of-Everything" class="headerlink" title="Solutions of Everything"></a>Solutions of Everything</h1><h2 id="Hexo推上去的图片加载不出来"><a href="#Hexo推上去的图片加载不出来" class="headerlink" title="Hexo推上去的图片加载不出来"></a>Hexo推上去的图片加载不出来</h2><p>使用Hexo-asset-img插件，把之前的Hexo-asset-image插件卸载掉</p><p>安装 hexo-renderer-marked ： npm install hexo-renderer-marked –save</p><p>修改博客根目录的 _config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Typora设置</p><img src="/2024/12/04/Solutions%20of%20Everything/image-20241204160406607.png" class="" title="image-20241204160406607">]]></content>
    
    
    <categories>
      
      <category>手册</category>
      
    </categories>
    
    
    <tags>
      
      <tag>解决方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Web Crawler</title>
    <link href="/2024/12/03/Python%20Web%20Crawler/"/>
    <url>/2024/12/03/Python%20Web%20Crawler/</url>
    
    <content type="html"><![CDATA[<h1 id="Python网络爬虫笔记"><a href="#Python网络爬虫笔记" class="headerlink" title="Python网络爬虫笔记"></a>Python网络爬虫笔记</h1><h2 id="HTTP基本原理"><a href="#HTTP基本原理" class="headerlink" title="HTTP基本原理"></a>HTTP基本原理</h2><h3 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h3><p>URI 的全称为 UniformResource Identifier，即统一资源标志符；<br>URL的全称为 Universal Resource Locator，即统一资源定位符。</p><p>URL是 URI 的子集，也就是说每个URL都是URI, 但并非每个URI都是URL，<a href="https://github.corn/favicon.ico">https://github.corn/favicon.ico</a> 既是一个 URI, 也是一个 URL</p><p>URI 还包括一个子类，叫作 URN, 其全称为 Universal Resource  Name, 即统一资源名称。</p><p>URN 只为资源命名而不指定如何定位 资源，例如 um:isbn:0451450523 指定了一本书的 ISBN, 可以唯 一标识这本书，但没有指定到哪里获取这本书，这就是 URN。</p><p><img src="/Python%20Web%20Crawler/image-20241203174402184.png" alt="image-20241203174402184"></p><p>在目前的互联网中， URN使用得非常少，几乎所有的URI都是URL, 所以对于一般的网页链接， 我们既可以称之为URL, 也可以称之为URI。</p><p>但URL也不是随便写的，它也是需要遵循一定格式规范的，基本的组成格式如下：<br><strong>scheme:&#x2F;&#x2F; [username:password@]hostname[:port] [&#x2F;path ][;parameters] [?query][#fragment]</strong></p><p><strong>scheme</strong>: 协议。 常用的协议有 http、 https、 ftp 等，另外 scheme 也被常称作 protocol, 二者都代表协议的意思。</p><p><strong>usermame、 password</strong>: 用户名和密码。 在某些情况下 URL 需要提供用户名和密码才能访问， 这时候可以把用户名和密码放在host前面。比如<a href="https://ssr3.scrape.center这个/">https://ssr3.scrape.center这个</a> URL需要用户名 和密码才能访问，直接写为<a href="https://admin:admin@ssr3.scrape.center/">https://admin:admin@ssr3.scrape.center</a> 则可以直接访问。</p><p><strong>hostname</strong>: 主机地址。 可以是域名或 IP 地址，比如 <a href="https://www.baidu.com/">https://www.baidu.com</a> 这个 URL 中的 hostname 就是 <a href="http://www.baidu.com/">www.baidu.com</a>, 这就是百度的二级域名。比如 <a href="https://8.8.8.8/">https://8.8.8.8</a> 这个 URL 中的 hostname 就是 8.8.8.8, 它是一个 IP地址。</p><p><strong>port</strong>: 端口 。 这是服务器设定的服务端口，比如 <a href="https://8.8.8.8:12345/">https://8.8.8.8:12345</a> 这个 URL 中的端口就是 12345。 但是有些 URL 中没有端口信息，这是使用了默认的端口。 http协议的默认端口是 80, https 协议的默认端口是44孔所以 <a href="https://www.baidu.com/">https://www.baidu.com</a> 其实相当千 <a href="https://www.baidu.com/">https://www.baidu.com:443</a>, 而<a href="http://www.baidu.com/">http://www.baidu.com</a> 其实相当于 <a href="http://www.baidu.com:80。">http://www.baidu.com:80。</a></p><p><strong>path</strong>: 路径。 指的是网络资源在服务器中的指定地址，比如 <a href="https://github.com/favicon.ico">https://github.com/favicon.ico</a> 中的 path 就是 favicon.ico, 指的是访问 GitHub 根目录下的 favicon.ico。</p><p><strong>parameters</strong>: 参数。 用来指定访问某个资源时的附加信息，比如<a href="https://8.8.8.8:12345/hello;user">https://8.8.8.8:12345/hello;user</a> 中的 user 就是 parameters。 但是 parameters 现在用得很少，所以目前很多人会把该参数后面的query 部分称为参数，甚至把parameters 和 query 混用。 严格意义上来说， parameters 是分号（；）后 面的内容。</p><p><strong>query</strong>: 查询。 用来查询某类资源，如果有多个查询，则用＆隔开。 query 其实非常常见，比 如 <a href="https://www.baidu.com/s?wd=nba&ie=utf-8">https://www.baidu.com/s?wd=nba&amp;ie=utf-8</a>, 其中的 query 部分就是 wd&#x3D;nba&amp;ie&#x3D;utf-8, 这里 指定了 wd 是nba, ie 是 utf-8。 由千 query 比刚才所说的 parameters 使用频率高很多，所以平 时我们见到的参数、 GET请求参数、 parameters、 params 等称呼多数情况指代的也是 query。 从严格意义上来说，应该用query来表示。</p><p><strong>fragment</strong>: 片段。 它是对资源描述的部分补充，可以理解为资源内部的书签。 目前它有两个主要的应用，一个是用作单页面路由，比如现代前端框架Vue、 React 都可以借助它来做路由管理；另外一个是用作 HTML 描点，用它可以控制一个页面打开时自动下滑滚动到某个特定的位置。</p><h2 id="基本库的使用"><a href="#基本库的使用" class="headerlink" title="基本库的使用"></a>基本库的使用</h2><h3 id="urlib的使用"><a href="#urlib的使用" class="headerlink" title="urlib的使用"></a>urlib的使用</h3><p>使用urllib 库的 request 模块，可以方便地发送请求并得到响应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request <br>response= urllib.request.urlopen(<span class="hljs-string">&#x27;https: / /www.python.org&#x27;</span>) <br><span class="hljs-built_in">print</span>(response. read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>这里我们只用了两行代码，便完成了 Python 官网的抓取，输出了其网页的源代码。 得到源代码 之后，我们想要的链接、图片地址、文本信息不就都可以提取出来了吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request <br>response = urllib. request. urlopen(<span class="hljs-string">&#x27;https: / /www. python. org&#x27;</span>) <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(response)) <br><span class="hljs-comment">#输出结果如下：</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;http.client.HTTPResponse&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>可以看出 ． 响应是一个 HTTPResposne 类型的对象，主要包含 read 、 readinto 、 getheader、 get headers 、 fileno 等方法，以及 msg、 version 、 status 、 reason 、 debuglevel 、 closed 等属性</p><p>得到响应之后，我们把它赋值给response变量，然后就可以调用上述那些方法和属性，得到返回 结果的一系列信息了</p><p>调用 read 方法可以得到响应的网页内容、调用 status 属性可以得到响应结果的状态码 (200 代表请求成功， 404 代表网页未找到等）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request <br>response = urllib.request.urlopen(<span class="hljs-string">&#x27;https://www.python.org&#x27;</span>) <br><span class="hljs-built_in">print</span>(response.status) <br><span class="hljs-built_in">print</span>(response.getheaders()) <br><span class="hljs-built_in">print</span>(response.getheader(<span class="hljs-string">&#x27;Server&#x27;</span>)) <br><br><span class="hljs-comment">#输出结果</span><br><span class="hljs-number">200</span><br>[(<span class="hljs-string">&#x27;Connection&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>), (<span class="hljs-string">&#x27;Content-Length&#x27;</span>, <span class="hljs-string">&#x27;51214&#x27;</span>), (<span class="hljs-string">&#x27;content-type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>), (<span class="hljs-string">&#x27;x-frame-options&#x27;</span>, <span class="hljs-string">&#x27;SAMEORIGIN&#x27;</span>), (<span class="hljs-string">&#x27;via&#x27;</span>, <span class="hljs-string">&#x27;1.1 varnish, 1.1 varnish, 1.1 varnish&#x27;</span>), (<span class="hljs-string">&#x27;Accept-Ranges&#x27;</span>, <span class="hljs-string">&#x27;bytes&#x27;</span>), (<span class="hljs-string">&#x27;Date&#x27;</span>, <span class="hljs-string">&#x27;Mon, 02 Dec 2024 01:00:23 GMT&#x27;</span>), (<span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;1066&#x27;</span>), (<span class="hljs-string">&#x27;X-Served-By&#x27;</span>, <span class="hljs-string">&#x27;cache-iad-kiad7000114-IAD, cache-iad-kiad7000114-IAD, cache-tyo11956-TYO&#x27;</span>), (<span class="hljs-string">&#x27;X-Cache&#x27;</span>, <span class="hljs-string">&#x27;MISS, HIT, HIT&#x27;</span>), (<span class="hljs-string">&#x27;X-Cache-Hits&#x27;</span>, <span class="hljs-string">&#x27;0, 446, 4&#x27;</span>), (<span class="hljs-string">&#x27;X-Timer&#x27;</span>, <span class="hljs-string">&#x27;S1733101224.894738,VS0,VE0&#x27;</span>), (<span class="hljs-string">&#x27;Vary&#x27;</span>, <span class="hljs-string">&#x27;Cookie&#x27;</span>), (<span class="hljs-string">&#x27;Strict-Transport-Security&#x27;</span>, <span class="hljs-string">&#x27;max-age=63072000; includeSubDomains; preload&#x27;</span>)]<br><span class="hljs-literal">None</span> <span class="hljs-comment">#nginx</span><br></code></pre></td></tr></table></figure><p>其中前两个输出分别是响应的状态码和响应的头信息；最后一个输出是调用 getheader 方法，并传入参数Server，获取了响应头中 Server 的值，结果是 nginx, 意思为服务器是用Nginx搭建（但我运行出来是None…）</p><p>如果想给链接传递一些参数，又该怎么实现呢？首先看一下urlopen方法的API:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">urllib. request. urlopen(url, data=<span class="hljs-literal">None</span>, [timeout,]*, cafile=<span class="hljs-literal">None</span>, capath=<span class="hljs-literal">None</span>, cadefault=<span class="hljs-literal">False</span>, context=<span class="hljs-literal">None</span>) <br></code></pre></td></tr></table></figure><h4 id="data-参数"><a href="#data-参数" class="headerlink" title="data 参数"></a>data 参数</h4><p>data 参数是可选的。在添加该参数时，需要使用bytes方法将参数转化为字节流编码格式的内容， 即 bytes 类型。 另外，如果传递了这个参数，那么它的请求方式就不再是GET, 而是POST了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse <br><span class="hljs-keyword">import</span> urllib.request <br>data= <span class="hljs-built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;germey&#x27;</span>&#125;), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <br>response= urllib.request.urlopen(<span class="hljs-string">&#x27;https://www.httpbin.org/post&#x27;</span>, data=data) <br><span class="hljs-built_in">print</span>(response. read(). decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>这里我们传递了一个参数name, 值是germey, 需要将它转码成bytes 类型。 转码时采用了 bytes方法， 该方法的第一个参数得是 str （字符串）类型，因此用 urllib.parse模块里的 urlencode 方法将字典参数转化为字符串；第二个参数用于指定编码格式，这里指定为utf-8</p><h4 id="timeout-参数"><a href="#timeout-参数" class="headerlink" title="timeout 参数"></a>timeout 参数</h4><p>timeout 参数用于设置超时时间，单位为秒，意思是如果请求超出了设置的这个时间，还没有得 到响应，就会抛出异常。 如果不指定该参数，则会使用全局默认时间。 这个参数支持HTTP、 HTIPS、 FTP 请求。</p><p>see you ~</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Learning</title>
    <link href="/2024/12/03/Redis%20Learning/"/>
    <url>/2024/12/03/Redis%20Learning/</url>
    
    <content type="html"><![CDATA[<p>This is a Redis Learning blog which is recorded during my internship.</p><p>Learning the basic commands is boring, I admit it.</p><p>BUT, Every high-rise buildings are built brick by brick.</p><p>Hope I’ll be able to keep going~</p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="针对字符串的命令"><a href="#针对字符串的命令" class="headerlink" title="针对字符串的命令"></a>针对字符串的命令</h2><h3 id="读写字符串的set和get命令"><a href="#读写字符串的set和get命令" class="headerlink" title="读写字符串的set和get命令"></a>读写字符串的set和get命令</h3><blockquote><p>set key value [EX seconds|PX milliseconds] [NX|XX]  [KEEPTTL]</p></blockquote><p>通过EX和PX参数可以指定该变量的生存时间，只不过EX参数的单位是秒，而PX参数的单位是毫秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; set 001 &#x27;Mary&#x27; <br>02 OK <br>03 127.0.0.1:6379&gt; set 001 &#x27;Mike&#x27; NX #加了NX参数，表示key不存在时才能设置值<br>04 (nil) <br>05 127.0.0.1:6379&gt; get 001 <br>06 &quot;Mary&quot; <br>07 127.0.0.1:6379&gt; setNX 001 &#x27;Mike&#x27;  #与第3行setNX是等价的，只不过setNX返回的是(integer) 0<br>08 (integer) 0 <br>09 127.0.0.1:6379&gt; get 001 <br>10 &quot;Mary&quot; <br>11 127.0.0.1:6379&gt; set 001 &#x27;Mike&#x27; #再次对001的key进行设置值操作，这里操作会成功<br>12 OK <br>13 127.0.0.1:6379&gt; get 001 <br>14 &quot;Mike&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; get 002 <br>02 (nil) <br>03 127.0.0.1:6379&gt; set 002 &#x27;Tom&#x27; XX #XX参数，表示002号key存在时才进行操作<br>04 (nil) <br>05 127.0.0.1:6379&gt; set 002 &#x27;Tom&#x27; PX 10 <br>06 OK <br>07 127.0.0.1:6379&gt; get 002 <br>08 (nil) <br>09 127.0.0.1:6379&gt; set 002 &#x27;Tom&#x27; EX 60*12 #生存时间一定是数值，不能是表达式<br>10 (error) ERR value is not an integer or out of range <br>11 127.0.0.1:6379&gt; set 002 &#x27;Tom&#x27; EX 720 <br>12 OK <br>13 127.0.0.1:6379&gt; get 002 <br>14 &quot;Tom&quot;<br></code></pre></td></tr></table></figure><h3 id="设置和获取多个字符串的命令"><a href="#设置和获取多个字符串的命令" class="headerlink" title="设置和获取多个字符串的命令"></a>设置和获取多个字符串的命令</h3><blockquote><p>mset key value [key value…]</p></blockquote><blockquote><p>mget key [key…]</p></blockquote><p>注意，mset和mget命令不包含NX、XX、PX和EX等参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; mset 003 &quot;Peter&quot; 004 Mary EX 100  #虽然该命令用EX参数设置了生存时间，但是事实上不会生效<br>02 OK <br>03 127.0.0.1:6379&gt; mget 003 004 005 #由于没有005对应的值，所以针对该key的取值会返回nil<br>04 1) &quot;Peter&quot; <br>05 2) &quot;Mary&quot; <br>06 3) (nil) <br>07 127.0.0.1:6379&gt; mset 003 &quot;Peter&quot; 006 &#x27;JohnSon&#x27; NX #mset命令里带了NX参数，报错（该命令不支持这个参数）<br>08 (error) ERR wrong number of arguments for MSET    <br>09 127.0.0.1:6379&gt; mset 003 &quot;Peter&quot; 006 &#x27;JohnSon&#x27; XX #mset命令里带了XX参数，报错（该命令不支持这个参数）<br>10 (error) ERR wrong number of arguments for MSET <br>11 127.0.0.1:6379&gt; get 006 <br>12 (nil) <br>13 127.0.0.1:6379&gt; mset 007 &quot;John&quot; 008 &#x27;Tim&#x27; PX 10  #虽然该命令返回OK<br>14 OK   <br>15 127.0.0.1:6379&gt; mget  007 008 #但是10毫秒以后再调用第15行的mget命令依然能得到值<br>16 1) &quot;John&quot; #也就是说PX（还有EX）参数不会生效<br>17 2) &quot;Tim&quot;<br></code></pre></td></tr></table></figure><p>其中字符串可以用双引号包含，也可以用单引号包含，还可以不带任何符号。</p><h3 id="对值进行增量和减量操作"><a href="#对值进行增量和减量操作" class="headerlink" title="对值进行增量和减量操作"></a>对值进行增量和减量操作</h3><blockquote><p>通过incr key命令能对key所对应的数字类型值进行加1操作<br>通过decr key命令能对key所对应的值进行减1操作<br>通过incrby key increment命令能对key对应的值进行加increment的操作<br>通过decrby by decrement命令能对key对应的值进行减decrement的操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; incr visit #对于没定义的key，默认是0？<br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; incrby visit 10  #加了个by，就是加后面的值 即1+10。 若visit之前没有值，仍默认是0？<br>04 (integer) 11 <br>05 127.0.0.1:6379&gt; decr visit <br>06 (integer) 10 <br>07 127.0.0.1:6379&gt; decrby visit 5 <br>08 (integer) 5 <br>09 127.0.0.1:6379&gt; get visit <br>10 &quot;5&quot; <br>11 127.0.0.1:6379&gt; set visitPerson &#x27;Peter&#x27; <br>12 OK <br>13 127.0.0.1:6379&gt; incr visitPerson #incr和decr命令作用在字符串类型的&#x27;Peter&#x27;上，所以会出错<br>14 (error) ERR value is not an integer or out of range #同样，incrby和decrby命令也只能作用在数字类型的变量上<br>15 127.0.0.1:6379&gt; decr visitPerson <br>16 (error) ERR value is not an integer or out of range<br></code></pre></td></tr></table></figure><h3 id="通过getset命令设置新值"><a href="#通过getset命令设置新值" class="headerlink" title="通过getset命令设置新值"></a>通过getset命令设置新值</h3><blockquote><p>该命令的语法是getset key value，如果key对应的值存在，则会用value覆盖旧值，同时返回旧值<br>如果key对应的值不存在，也会设值，但会返回nil</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; getset 009 &#x27;Alex&#x27; <br>02 (nil) <br>03 127.0.0.1:6379&gt; get 009 <br>04 &quot;Alex&quot; <br>05 127.0.0.1:6379&gt; getset 009 &#x27;Frank&#x27; <br>06 &quot;Alex&quot; <br>07 127.0.0.1:6379&gt; get 009 <br>08 &quot;Frank&quot;<br></code></pre></td></tr></table></figure><h3 id="针对字符串的其他操作"><a href="#针对字符串的其他操作" class="headerlink" title="针对字符串的其他操作"></a>针对字符串的其他操作</h3><blockquote><p>获取key的子字符串命令：getrange key start end，返回key对应的值从start到end的子字符串。</p><p>替换部分值命令：setrange key offset value，从offset位置开始，把值替换为value。 </p><p>统计字符串长度的命令：strlen key，返回字符串的长度。 </p><p>追加值的命令：append key value，把value追加到原值的末尾。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; set tel 021-12345678 <br>02 OK <br>03 127.0.0.1:6379&gt; getrange tel 4 12 <br>04 &quot;12345678&quot; <br>05 127.0.0.1:6379&gt; setrange tel 4 87654321 <br>06 (integer) 12 <br>07 127.0.0.1:6379&gt; get tel <br>08 &quot;021-87654321&quot; <br>09 127.0.0.1:6379&gt; strlen tel <br>10 (integer) 12 <br>11 127.0.0.1:6379&gt; append tel 90 <br>12 (integer) 14 <br>13 127.0.0.1:6379&gt; get tel <br>14 &quot;021-8765432190&quot;<br></code></pre></td></tr></table></figure><h2 id="针对哈希类型变量的命令"><a href="#针对哈希类型变量的命令" class="headerlink" title="针对哈希类型变量的命令"></a>针对哈希类型变量的命令</h2><h3 id="设置并获取哈希值"><a href="#设置并获取哈希值" class="headerlink" title="设置并获取哈希值"></a>设置并获取哈希值</h3><blockquote><p>hset 的命令格式如下，其中key是待缓存对象的键，field value 是以键值对的形式描述的对象数据<br>针对同一个key，可以用多个 field value对来存储数据，这里field可以理解成对象的属性名， value可以理解成对象的属性值</p><p>hset key field value [field value …]</p></blockquote><blockquote><p>hget 的命令格式如下，其中key是待读取对象的键，如果存在key和field所对应的数据，则返回该数据，否则返回nil值</p><p>hget key field</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; hset 001 name &#x27;peter&#x27; salary 10000 dep dataTeam  #通过hset命令设置了key是001的员工数据<br>02 (integer) 3 <br>03 127.0.0.1:6379&gt; hget 001 name <br>04 &quot;peter&quot; <br>05 127.0.0.1:6379&gt; hget 001 salary <br>06 &quot;10000&quot; <br>07 127.0.0.1:6379&gt; hget 001 dep <br>08 &quot;dataTeam&quot; <br>09 127.0.0.1:6379&gt; hget 002 name <br>10 (nil) <br>11 127.0.0.1:6379&gt; hget 001 age <br>12 (nil) <br>13 127.0.0.1:6379&gt; hget 001 <br>14 (error) ERR wrong number of arguments for &#x27;hget&#x27; command<br></code></pre></td></tr></table></figure><h3 id="hsetnx命令"><a href="#hsetnx命令" class="headerlink" title="hsetnx命令"></a>hsetnx命令</h3><blockquote><p>在用hset命令设置哈希类型的变量时，如果出现重复，就会用后设的数据覆盖掉之前的数据。与之对应的是hsetnx命令</p><p>hsetnx key field value</p><p>该命令的含义是，只有当key和field所对应的value不存在时才会设置对应的value，而且key之后只能带一对field和value，而hset命令的key之后能带多个field和value对。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; hset 001 name &#x27;johnson&#x27; #用hset命令重新设置了001号员工name的值<br>02 (integer) 0 <br>03 127.0.0.1:6379&gt; hget 001 name <br>04 &quot;johnson&quot; <br>05 127.0.0.1:6379&gt; hsetnx 002 name &#x27;tom&#x27; #第一次调用时，key为002所对应的name值不存在，所以能设置成功<br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; hsetnx 002 name &#x27;tom&#x27; #第二次调用时，值已经存在，所以无法设置<br>08 (integer) 0 <br>09 127.0.0.1:6379&gt; hsetnx 003 name &#x27;mike&#x27; salary 15000  #hsetnx命令的key之后只能设置一对field和value<br>10 (error) ERR wrong number of arguments for &#x27;hsetnx&#x27; command <br></code></pre></td></tr></table></figure><h3 id="针对key的相关操作"><a href="#针对key的相关操作" class="headerlink" title="针对key的相关操作"></a>针对key的相关操作</h3><blockquote><p>通过hkeys key命令，能查看该key所对应哈希类型数据的所有 field；<br>通过hvals key命令，能查看key所对应哈希类型数据的所有 value；<br>通过hgetall key命令，能以field和value对的形式查看key对应的哈希类型数据。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; hset 010 name &#x27;mary&#x27; salary 8000 <br>02 (integer) 2 <br>03 127.0.0.1:6379&gt; hkeys 010 <br>04 1) &quot;name&quot; <br>05 2) &quot;salary&quot; <br>06 127.0.0.1:6379&gt; hvals 010 <br>07 1) &quot;mary&quot; <br>08 2) &quot;8000&quot; <br>09 127.0.0.1:6379&gt; hgetall 010 <br>10 1) &quot;name&quot; <br>11 2) &quot;mary&quot; <br>12 3) &quot;salary&quot; <br>13 4) &quot;8000&quot; <br>14 127.0.0.1:6379&gt; hkeys 00 <br>15 (empty array) <br>16 127.0.0.1:6379&gt; hvals 00 <br>17 (empty array) <br>18 127.0.0.1:6379&gt; hgetall 00 <br>19 (empty array)<br></code></pre></td></tr></table></figure><h3 id="用hexists命令判断值是否存在"><a href="#用hexists命令判断值是否存在" class="headerlink" title="用hexists命令判断值是否存在"></a>用hexists命令判断值是否存在</h3><blockquote><p>通过hexists命令，能判断key和field对应的value是否存在</p><p>hexists key field</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; hexists 010 name <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; hexists 00 name <br>04 (integer) 0 <br>05 127.0.0.1:6379&gt; hexists 00 #只传了一个参数<br>06 (error) ERR wrong number of arguments for &#x27;hexists&#x27; command<br></code></pre></td></tr></table></figure><h3 id="对哈希类型数据的删除操作"><a href="#对哈希类型数据的删除操作" class="headerlink" title="对哈希类型数据的删除操作"></a>对哈希类型数据的删除操作</h3><blockquote><p>通过hdel命令，能删除key指定的field数据</p><p>hdel key field [field …]</p><p>通过该命令能同时删除一个key对应的多个 field 数据，如果要删除指定key所对应的整个哈希类型的数据，则需要用 del key命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; hdel 001 name salary <br>02 (integer) 2 <br>03 127.0.0.1:6379&gt; hdel 001 #只传入1个参数<br>04 (error) ERR wrong number of arguments for &#x27;hdel&#x27; command <br>05 127.0.0.1:6379&gt; del 001 #用del命令删除了key为001的整个哈希类型的数据<br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; hvals 001 <br>08 (empty array)<br></code></pre></td></tr></table></figure><h2 id="针对列表类型变量的命令"><a href="#针对列表类型变量的命令" class="headerlink" title="针对列表类型变量的命令"></a>针对列表类型变量的命令</h2><h3 id="读写列表的命令"><a href="#读写列表的命令" class="headerlink" title="读写列表的命令"></a>读写列表的命令</h3><blockquote><p>可以通过lpush命令把一个和多个值依次插入到列表的<strong>头部</strong><br>lpush key element [element …]<br>key指定待插入的列表，element表示插入到列表的值。</p><p>可以通过lindex命令读取列表的值<br>lindex key index<br>key指定待读取的列表，index指定待读取列表值的索引号</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpush 001 &#x27;dataTeam&#x27; <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; lpush 001 15000 <br>04 (integer) 2 <br>05 127.0.0.1:6379&gt; lpush 001 &#x27;Peter&#x27; <br>06 (integer) 3 <br>07 127.0.0.1:6379&gt; lindex 001 0 <br>08 &quot;Peter&quot; <br>09 127.0.0.1:6379&gt; lindex 001 2 <br>10 &quot;dataTeam&quot; <br>11 127.0.0.1:6379&gt; lindex 002  #需要两个参数<br>12 (error) ERR wrong number of arguments for &#x27;lindex&#x27; command <br>13 127.0.0.1:6379&gt; lindex 001 4 <br>14 (nil) <br>15 127.0.0.1:6379&gt; lpush 002 &#x27;dataTeam&#x27; 12000 &#x27;Mary&#x27; <br>16 (integer) 3 <br>17 127.0.0.1:6379&gt; lindex 002 1  #lindex 002 0 为 Mary<br>18 &quot;12000&quot;<br></code></pre></td></tr></table></figure><blockquote><p>过rpush命令在指定列表的<strong>尾部</strong>插入数据</p><p>rpush key element [element …]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; rpush 003 &#x27;Tim&#x27; &#x27;20000&#x27; &#x27;Hr Team&#x27;  #尾插<br>02 (integer) 3 <br>03 127.0.0.1:6379&gt; lindex 003 0 <br>04 &quot;Tim&quot; <br>05 127.0.0.1:6379&gt; lindex 003 1 <br>06 &quot;20000&quot; <br>07 127.0.0.1:6379&gt; lindex 003 2 <br>08 &quot;Hr Team&quot;<br></code></pre></td></tr></table></figure><h3 id="lpushx和rpushx命令"><a href="#lpushx和rpushx命令" class="headerlink" title="lpushx和rpushx命令"></a>lpushx和rpushx命令</h3><blockquote><p>这两个命令与lpush和rpush命令很相似，只是当对应key<strong>不存在时</strong>，这两个命令不执行，仅当<strong>对应key存在时才向头部或尾部插入数据</strong>。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; del 003 <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; lpushx 003 &#x27;dataTeam&#x27; <br>04 (integer) 0 <br>05 127.0.0.1:6379&gt; lpush 003 &#x27;dataTeam&#x27; <br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; lpushx 003 10000 <br>08 (integer) 2 <br>09 127.0.0.1:6379&gt; lindex 003 1 <br>10 &quot;dataTeam&quot; <br>11 127.0.0.1:6379&gt; del 004 <br>12 (integer) 1 <br>13 127.0.0.1:6379&gt; rpushx 004 &#x27;Tim&#x27; <br>14 (integer) 0 <br>15 127.0.0.1:6379&gt; rpush 004 &#x27;Tim&#x27; <br>16 (integer) 1 <br>17 127.0.0.1:6379&gt; rpushx 004 15000 <br>18 (integer) 2 <br>19 127.0.0.1:6379&gt; lindex 004 1 <br>20 &quot;15000&quot;<br></code></pre></td></tr></table></figure><h3 id="用list模拟堆栈和队列"><a href="#用list模拟堆栈和队列" class="headerlink" title="用list模拟堆栈和队列"></a>用list模拟堆栈和队列</h3><blockquote><p>上文里讲述的两个命令lpush和rpush的第一个字母分别是l和r， 顾名思义，分别是向左边（list头）和右边（list尾）添加数据，与之对应的有lpop和rpop命令，表示分别从list头和list尾读数据，而且读完会把该数据从列表里弹出</p><p>通过如下的lpush和lpop命令能模拟“先入后出”的堆栈效果。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 c:\work&gt;docker exec -it myFirstRedis /bin/bash <br>02 root@22bf09daac79:/data# redis-cli <br>03 127.0.0.1:6379&gt; lpush myStack 1 <br>04 (integer) 1 <br>05 127.0.0.1:6379&gt; lpush myStack 2 <br>06 (integer) 2 <br>07 127.0.0.1:6379&gt; lpush myStack 3 <br>08 (integer) 3 <br>09 127.0.0.1:6379&gt; lpop myStack <br>10 &quot;3&quot; <br>11 127.0.0.1:6379&gt; lpop myStack <br>12 &quot;2&quot; <br>13 127.0.0.1:6379&gt; lpop myStack <br>14 &quot;1&quot; <br>15 127.0.0.1:6379&gt; lpop myStack <br>16 (nil)<br></code></pre></td></tr></table></figure><blockquote><p>也可以用rpush和rpop命令来模拟堆栈效果，只不过这里是从list 的右边加入和弹出元素。此外，还可以通过lpush和rpop这两个命令来 模拟“先来先服务”的队列效果。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpush myQueue 1 <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; lpush myQueue 2 <br>04 (integer) 2 <br>05 127.0.0.1:6379&gt; lpush myQueue 3 <br>06 (integer) 3 <br>07 127.0.0.1:6379&gt; rpop myQueue <br>08 &quot;1&quot; <br>09 127.0.0.1:6379&gt; rpop myQueue <br>10 &quot;2&quot; <br>11 127.0.0.1:6379&gt; rpop myQueue <br>12 &quot;3&quot;<br></code></pre></td></tr></table></figure><h3 id="用lrange命令获取指定区间内的数据"><a href="#用lrange命令获取指定区间内的数据" class="headerlink" title="用lrange命令获取指定区间内的数据"></a>用lrange命令获取指定区间内的数据</h3><blockquote><p>之前的lindex命令能获取key对应列表里指定索引的数据，而通过lrange命令则可以获取指定区间内的数据</p><p>lrange key start stop</p><p>其中，start和stop分别表示开始和结束索引</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; del 003 <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; rpush 003 &#x27;dataTeam&#x27; 15000 &#x27;Mary&#x27; <br>04 (integer) 3 <br>05 127.0.0.1:6379&gt; lrange 003 0 1 <br>06 1) &quot;dataTeam&quot; <br>07 2) &quot;15000&quot; <br>08 127.0.0.1:6379&gt; lrange 003 0 2 <br>09 1) &quot;dataTeam&quot; <br>10 2) &quot;15000&quot; <br>11 3) &quot;Mary&quot; <br>12 127.0.0.1:6379&gt; lrange 003 0 4 #结束索引的值超出列表范围，但不报错，而会用列表实际的结束索引替换掉stop值<br>13 1) &quot;dataTeam&quot; <br>14 2) &quot;15000&quot; <br>15 3) &quot;Mary&quot; <br>16 127.0.0.1:6379&gt; lrange 003 4 0 #开始索引比结束索引还大<br>17 (empty array)<br></code></pre></td></tr></table></figure><h3 id="用lset命令修改列表数据"><a href="#用lset命令修改列表数据" class="headerlink" title="用lset命令修改列表数据"></a>用lset命令修改列表数据</h3><blockquote><p>通过lset命令能修改列表里的元素</p><p>lset key index element</p><p>通过该命令，能把由key指定的列表里index的数据修改为 element</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lindex 003 1 <br>02 &quot;15000&quot; <br>03 127.0.0.1:6379&gt; lset 003 1 18000 <br>04 OK <br>05 127.0.0.1:6379&gt; lindex 003 1 <br>06 &quot;18000&quot; <br>07 127.0.0.1:6379&gt; lset 003 10 20000 #key对应的列表存在，而index对应的数据不存在<br>08 (error) ERR index out of range <br>09 127.0.0.1:6379&gt; lset 005 10 20000 #key对应的列表不存在<br>10 (error) ERR no such key<br></code></pre></td></tr></table></figure><h3 id="删除列表数据的命令"><a href="#删除列表数据的命令" class="headerlink" title="删除列表数据的命令"></a>删除列表数据的命令</h3><blockquote><p>可以通过lpop key命令返回并删除key对应列表头部的第一个数 据，也可以通过rpop命令返回并删除key对应列表尾部的第一个数据</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpop 003 <br>02 &quot;dataTeam&quot; <br>03 127.0.0.1:6379&gt; rpop 003 <br>04 &quot;Mary&quot; <br>05 127.0.0.1:6379&gt; lpop 010 <br>06 (nil) <br>07 127.0.0.1:6379&gt; rpop 010 <br>08 (nil)<br></code></pre></td></tr></table></figure><blockquote><p>也可以通过lrem命令删除列表里的指定元素</p><p>lrem key count element</p><p>其中，key指向待删除元素的列表。当count等于0时，删除该列表里所有值是element的数据；<br>当count大于0时，删除从头到尾方向数量为count个、值是element的数据；<br>当count小于0时，删除从尾到头方向值是element、数量为count个的数据</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpush 001 1 1 2 2 1 <br>02 (integer) 5 <br>03 127.0.0.1:6379&gt; lrem 001 0 1 <br>04 (integer) 3 <br>05 127.0.0.1:6379&gt; lrange 001 0 3 <br>06 1) &quot;2&quot; <br>07 2) &quot;2&quot; <br>08 127.0.0.1:6379&gt; lpush 002 1 1 2 2 1 <br>09 (integer) 5 <br>10 127.0.0.1:6379&gt; lrem 002 2 1 <br>11 (integer) 2 <br>12 127.0.0.1:6379&gt; lrange 002 0 3 <br>13 1) &quot;2&quot; <br>14 2) &quot;2&quot; <br>15 3) &quot;1&quot; <br>16 127.0.0.1:6379&gt; lpush 003 1 1 2 2 1 <br>17 (integer) 5 <br>18 127.0.0.1:6379&gt; lrem 003 -1 1 <br>19 (integer) 1 <br>20 127.0.0.1:6379&gt; lrange 003 0 4 <br>21 1) &quot;1&quot; <br>22 2) &quot;2&quot; <br>23 3) &quot;2&quot; <br>24 4) &quot;1&quot;<br></code></pre></td></tr></table></figure><h2 id="针对集合的命令"><a href="#针对集合的命令" class="headerlink" title="针对集合的命令"></a>针对集合的命令</h2><h3 id="读写集合的命令"><a href="#读写集合的命令" class="headerlink" title="读写集合的命令"></a>读写集合的命令</h3><blockquote><p>可以通过sadd命令向指定key的集合中添加一个或多个元素</p><p>sadd key member [member …]</p><p>通过smembers key命令可以读取key所对应集合里的所有数据。由 于集合里无法存储重复数据，因此可以在项目里实现去重的功能。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; sadd teamName &#x27;HR&#x27; &#x27;Account&#x27; &#x27;DataTeam&#x27; &#x27;HR&#x27; <br>02 (integer) 3 #添加的元素是有重复的，所以第2行显示只添加了3个元素到集合中<br>03 127.0.0.1:6379&gt; smembers teamName <br>04 1) &quot;Account&quot; <br>05 2) &quot;DataTeam&quot; <br>06 3) &quot;HR&quot;<br></code></pre></td></tr></table></figure><h3 id="列表和集合类数据的使用场景"><a href="#列表和集合类数据的使用场景" class="headerlink" title="列表和集合类数据的使用场景"></a>列表和集合类数据的使用场景</h3><p>列表存储数据时具有有序性，列表可以用来按一定的规范存储同一类数据。比如描述员工信息 时，可以用（Name,Salary,TeamName）的规范存储同一类的员工数据</p><p>用集合存储的数据往往是并列的，比如在之前存储的“团队名 称”信息里所有的数据（member）都是团队名称</p><h4 id="用sismember命令判断元素是否存在"><a href="#用sismember命令判断元素是否存在" class="headerlink" title="用sismember命令判断元素是否存在"></a>用sismember命令判断元素是否存在</h4><blockquote><p>如果要判断某个元素是否存在于集合中，可以用sismember命令</p><p>sismember key member</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; sismember teamName &#x27;HR&#x27; <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; sismember teamName &#x27;Dev&#x27; <br>04 (integer) 0 <br>05 127.0.0.1:6379&gt; sismember companyName &#x27;HR&#x27; <br>06 (integer) 0<br></code></pre></td></tr></table></figure><h3 id="获取集合的交集、并集和差集"><a href="#获取集合的交集、并集和差集" class="headerlink" title="获取集合的交集、并集和差集"></a>获取集合的交集、并集和差集</h3><blockquote><p>可以通过sinter命令获取多个key对应集合的交集<br>sinter key [key …]</p><p>可以通过suion命令获取多个key对应的并集<br>sunion key [key …]</p><p>可以通过sdiff命令获取多个key对应的差集<br>sdiff key ey …]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; sadd Mike Math English Computer <br>02 (integer) 3 <br>03 127.0.0.1:6379&gt; sadd Tom Computer Math Piano <br>04 (integer) 3 <br>05 127.0.0.1:6379&gt; sinter Mike Tom <br>06 1) &quot;Computer&quot; <br>07 2) &quot;Math&quot; <br>08 127.0.0.1:6379&gt; sunion Mike Tom <br>09 1) &quot;Computer&quot; <br>10 2) &quot;Piano&quot; <br>11 3) &quot;Math&quot; <br>12 4) &quot;English&quot; <br>13 127.0.0.1:6379&gt; sdiff Mike Tom <br>14 1) &quot;English&quot; <br>15 127.0.0.1:6379&gt; sdiff Tom Mike <br>16 1) &quot;Piano&quot;<br></code></pre></td></tr></table></figure><h3 id="用srem命令删除集合数据"><a href="#用srem命令删除集合数据" class="headerlink" title="用srem命令删除集合数据"></a>用srem命令删除集合数据</h3><blockquote><p>可以通过srem命令删除key所对应集合里的数据</p><p>srem key member [member …]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; sadd number 1 2 4 8 16 <br>02 (integer) 5 <br>03 127.0.0.1:6379&gt; srem number 1 4 5 <br>04 (integer) 2 <br>05 127.0.0.1:6379&gt; smembers number <br>06 1) &quot;2&quot; <br>07 2) &quot;8&quot; <br>08 3) &quot;16&quot; <br>09 127.0.0.1:6379&gt; srem nonExist 1 <br>10 (integer) 0 <br>11 127.0.0.1:6379&gt; lpush list 1 <br>12 (integer) 1 <br>13 127.0.0.1:6379&gt; srem list 1 <br>14 (error) WRONGTYPE Operation against a key holding the wrong <br>kind of value<br></code></pre></td></tr></table></figure><h2 id="针对有序集合的命令"><a href="#针对有序集合的命令" class="headerlink" title="针对有序集合的命令"></a>针对有序集合的命令</h2><p>有序集合（sorted set，也叫zset）同集合（sort）有一定的相 似性，其中都不能出现重复数据。在有序集合里，每个数据都会对应 一个score参数，以此来描述该数据的分数，该分数是排序的基础</p><h3 id="读写有序集合的命令"><a href="#读写有序集合的命令" class="headerlink" title="读写有序集合的命令"></a>读写有序集合的命令</h3><blockquote><p>可以通过zadd命令向由key指向的有序集合里添加元素</p><p> zadd key [NX|XX] [CH] [INCR] score member [score member  …]</p><p>可以通过CH参数指定该zadd命令修改时返回的个数，如果不设置，则默认返回0<br>当待插入的member不存在时，INCR参数不会起作用;当 member存在时，会让score加上由INCR指定的数值</p></blockquote><blockquote><p>通过zrange命令能读取key里指定score区间范围内的数据，其中 start和stop分别表示最低和最高的score，如果带WITHSCORES参数， 则会同时展示元素所对应的score值</p><p>zrange key start stop [WITHSCORES]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; zadd emp 4.0 Mike 2.0 Peter 1.0 Tim 0.5 <br>Johnson <br>02 (integer) 4 <br>03 127.0.0.1:6379&gt; zrange emp 0 2 <br>04 1) &quot;Johnson&quot; <br>05 2) &quot;Tim&quot; <br>06 3) &quot;Peter&quot; <br>07 127.0.0.1:6379&gt; zrange emp 0 2 WITHSCORES <br>08 1) &quot;Johnson&quot; <br>09 2) &quot;0.5&quot; <br>10 3) &quot;Tim&quot; <br>11 4) &quot;1&quot; <br>12 5) &quot;Peter&quot; <br>13 6) &quot;2&quot; <br>14 127.0.0.1:6379&gt; zrange emp 1 4 WITHSCORES <br>15 1) &quot;Tim&quot; <br>16 2) &quot;1&quot; <br>17 3) &quot;Peter&quot; <br>18 4) &quot;2&quot; <br>19 5) &quot;Mike&quot; <br>20 6) &quot;4&quot;<br></code></pre></td></tr></table></figure><h3 id="通过zincrby命令修改元素的分值"><a href="#通过zincrby命令修改元素的分值" class="headerlink" title="通过zincrby命令修改元素的分值"></a>通过zincrby命令修改元素的分值</h3><blockquote><p>在有序集合里，可以通过分数（也叫权重）来衡量元素的重要 性。在通过zadd添加元素以及对应的分数后，还可以通过zincrby命令 来更改元素对应的分值</p><p>zincrby key increment member</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; zincrby emp -2 Mike <br>02 &quot;2&quot; <br>03 127.0.0.1:6379&gt; zrevrange emp 1 2 WITHSCORES <br>04 1) &quot;Mike&quot; <br>05 2) &quot;2&quot; <br>06 3) &quot;Tim&quot; <br>07 4) &quot;1&quot; <br>08 127.0.0.1:6379&gt; zincrby emp 3 Mike <br>09 &quot;5&quot;<br></code></pre></td></tr></table></figure><h3 id="用zscore命令获取指定元素的分数"><a href="#用zscore命令获取指定元素的分数" class="headerlink" title="用zscore命令获取指定元素的分数"></a>用zscore命令获取指定元素的分数</h3><blockquote><p>通过zscore命令能得到key指定的元素的分数</p><p>zscore key member</p><p>其中，member表示待读取score值的元素</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; zscore emp Mike <br>02 &quot;5&quot; <br>03 127.0.0.1:6379&gt; zscore nonExist Mike  #如果集合找不到，或者集合里的元素找不到,则zscore命令会返回nil<br>04 (nil) <br>05 127.0.0.1:6379&gt; zscore emp nonExist <br>06 (nil) <br>07 127.0.0.1:6379&gt; zscore emp Mike Tom #通过zscore命令只能返回一个元素的score数值<br>08 (error) ERR wrong number of arguments for &#x27;zscore&#x27; command<br></code></pre></td></tr></table></figure><h3 id="查看有序集合里的元素排名"><a href="#查看有序集合里的元素排名" class="headerlink" title="查看有序集合里的元素排名"></a>查看有序集合里的元素排名</h3><blockquote><p>可以用zrank命令获取指定元素member在有序集合里的排名<br>zrank key member</p><p>可以用zrevrank命令获取元素在指定有序集合里的倒序排名<br>zrevrank key member</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; del number <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; zadd number 1 one 2 two 3 three 4 four 5 <br>five <br>04 (integer) 5 <br>05 127.0.0.1:6379&gt; zrank number two <br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; zrevrank number two <br>08 (integer) 3 <br>09 127.0.0.1:6379&gt; zrank number six <br>10 (nil) <br>11 127.0.0.1:6379&gt; zrevrank number six <br>12 (nil)<br></code></pre></td></tr></table></figure><h3 id="删除有序集合里的值"><a href="#删除有序集合里的值" class="headerlink" title="删除有序集合里的值"></a>删除有序集合里的值</h3><blockquote><p>可以通过zrem命令删除key指向的有序集合里的一个或多个元素<br>zrem key member [member …]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; zrem number three four six <br>02 (integer) 2 <br>03 127.0.0.1:6379&gt; zrange number 0 10 <br>04 1) &quot;one&quot; <br>05 2) &quot;two&quot; <br>06 3) &quot;five&quot; <br>07 127.0.0.1:6379&gt; zrem nonExist one <br>08 (integer) 0<br></code></pre></td></tr></table></figure><blockquote><p>可以通过zremrangebyscore命令删除key指向的有序队列里score（分值）在min到max范围内的元素</p><p>zremrangebyscore key min max</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; del number <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; zadd number 1.0 one 2.0 two 3.0 three 4.0 <br>four 5.0 five <br>04 (integer) 5 <br>05 127.0.0.1:6379&gt; zremrangebyscore number 0.5 3.5 <br>06 (integer) 3 <br>07 127.0.0.1:6379&gt; zrange number 0 5 <br>08 1) &quot;four&quot; <br>09 2) &quot;five&quot;<br></code></pre></td></tr></table></figure><h1 id="实践Redis的常用命令"><a href="#实践Redis的常用命令" class="headerlink" title="实践Redis的常用命令"></a>实践Redis的常用命令</h1><h2 id="键操作命令"><a href="#键操作命令" class="headerlink" title="键操作命令"></a>键操作命令</h2><h3 id="用exists命令判断键是否存在"><a href="#用exists命令判断键是否存在" class="headerlink" title="用exists命令判断键是否存在"></a>用exists命令判断键是否存在</h3><blockquote><p>通过exists命令能判断指定key是否存在<br>exists key</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; set name &#x27;Peter&#x27; <br>02 OK <br>03 127.0.0.1:6379&gt; exists name <br>04 (integer) 1 <br>05 127.0.0.1:6379&gt; exists EmpName <br>06 (integer) 0<br></code></pre></td></tr></table></figure><h3 id="用keys命令查找键"><a href="#用keys命令查找键" class="headerlink" title="用keys命令查找键"></a>用keys命令查找键</h3><blockquote><p>keys命令可以用通配符或正则表达式来查找指定模式的键</p><p>keys pattern</p><p>其中，pattern可以用“？”来代替一位字符，用“*”来匹配零个、一个或多个字符，还可以用正则表达式的方式来匹配（模式匹配）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; keys n?me <br>02 1) &quot;name&quot; <br>03 127.0.0.1:6379&gt; keys 0* <br>04 1) &quot;009&quot; <br>05 2) &quot;008&quot; <br>06 3) &quot;003&quot; <br>07 127.0.0.1:6379&gt; keys name <br>08 1) &quot;name&quot;<br></code></pre></td></tr></table></figure><h3 id="用scan命令查找键（没看懂）"><a href="#用scan命令查找键（没看懂）" class="headerlink" title="用scan命令查找键（没看懂）"></a>用scan命令查找键（没看懂）</h3><blockquote><p>除了keys命令外，还可以通过scan命令来查找键</p><p>scan cursor [MATCH pattern] [COUNT count]</p><p>scan命令里包含一个记录迭代位置的游标（cursor），每次执行 scan命令时，除了会返回查找到的键以外，还会返回一个记录迭代位置的游标数值，如果返回的迭代位置数值是0，则表示已经返回全部的键。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; scan 0 <br>02 1) &quot;0&quot; <br>03 2)  1) &quot;empID&quot; <br>04    2) &quot;name&quot; <br>05    3) &quot;ID&quot; <br>06    4) &quot;age&quot; <br>07    5) &quot;salary&quot;<br></code></pre></td></tr></table></figure><p>第1行的scan命令表示从0号游标开始查找键，其中表示返回键数量的COUNT值默认是10，也就是说该命令将从头开始返回10个键的名称。</p><p>从第2行到第7行的输出里能看到返回值。该命令返回的是一个数组，其中第2行的数组元素表示用于记录下次迭代位置的游标数值，这里是0，表示已经返回所有键的名称。第3行到第7行则输出了所有键的名称。</p><p>通过set命令再添加一些键，让键的数量大于10，随后可以通过如下命令观察返回游标的数值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; scan 0 MATCH * COUNT 5 <br>02 1) &quot;5&quot; <br>03 2) 1) &quot;empID&quot; <br>04    2) &quot;val3&quot; <br>05    3) &quot;name&quot; <br>06    4) &quot;val1&quot; <br>07    5) &quot;ID&quot;<br></code></pre></td></tr></table></figure><p>在第1行的scan命令里依然是从0号游标开始查找（从头开始）， 这里用MATCH *表示查找所有类型的键，用COUNT表示返回的数量。</p><p>由于当前键的数量大于5个，因此第2行表示下次迭代的游标数值 是5，第3行到第7行则返回了5个键的名称。由此大家可以看到“部分 查找”的效果。</p><p>上述keys命令以阻塞的方式来查找并返回键，这样当待查找键的 数量很多时耗时会比较长，而在这段时间里Redis是单线程的，因此无 法执行其他命令，严重的话还会导致系统卡顿。</p><p>和keys命令相比，scan命令是以非阻塞的方式查找并返回键，也 就是说，在大多数场景下scan能替代keys命令。如果待查找的键个数 比较少，那么用keys命令尚可，否则建议使用scan命令。</p><h3 id="重命名键"><a href="#重命名键" class="headerlink" title="重命名键"></a>重命名键</h3><blockquote><p>通过rename和renamenx两个命令可以重命名键 </p><p>rename key newkey<br>renamenx key newkey</p><p>对于rename命令，如果命名后的newkey键名已经存在，那么会覆盖旧值<br>对于renamenx命令， 如果newkey键名已经存在，那么会返回0，不执行修改命令 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; rename visitPerson VIPPerson <br>02 OK <br>03 127.0.0.1:6379&gt; exists visitPerson <br>04 (integer) 0 <br>05 127.0.0.1:6379&gt; get VIPPerson <br>06 &quot;Peter&quot; <br>07 127.0.0.1:6379&gt; renamenx name VIPPerson <br>08 (integer) 0 <br>09 127.0.0.1:6379&gt; renamenx errorName name <br>10 (error) ERR no such key <br>11 127.0.0.1:6379&gt; rename errorName name <br>12 (error) ERR no such key<br></code></pre></td></tr></table></figure><h3 id="用del命令删除键"><a href="#用del命令删除键" class="headerlink" title="用del命令删除键"></a>用del命令删除键</h3><blockquote><p>用del命令删除键后，该键所对应的值也会一并删除</p><p>del key [key …]</p><p>通过del命令，可以同时删除多个键</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">01 127.0.0.1:6379&gt; del 002 003 004 <br>02 (integer) 3 <br>03 127.0.0.1:6379&gt; del 002 007 <br>04 (integer) 1 <br>05 127.0.0.1:6379&gt; del 008 <br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; del errorKey <br>08 (integer) 0<br></code></pre></td></tr></table></figure><h3 id="关于键生存时间的命令"><a href="#关于键生存时间的命令" class="headerlink" title="关于键生存时间的命令"></a>关于键生存时间的命令</h3><blockquote><p>如果设置了键的生存时间，那么到时间后这个键就会被删除，通 过pttl和ttl命令能查看指定键的生存时间</p><p>pttl key<br>ttl key</p><p>pttl以毫秒为单位返回该key的生存时间，ttl以秒为单位 返回该key的生存时间。如果对应的key不存在，则这两个命令都返回‒2；如果key存在，但没有设置生存时间（一直生存），那么这两条命令返回‒1</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; set val 100 ex 300 <br>02 OK <br>03 127.0.0.1:6379&gt; pttl val <br>04 (integer) 297352 <br>05 127.0.0.1:6379&gt; ttl val <br>06 (integer) 291 <br>07 127.0.0.1:6379&gt; pttl nonExist #由于nonExist这个键不存在，所以返回的是‒2<br>08 (integer) -2 <br>09 127.0.0.1:6379&gt; ttl name #第9行的name键虽然存在，但是没有设置生存时间，所以返回的是‒1<br>10 (integer) -1<br></code></pre></td></tr></table></figure><blockquote><p>通过expire和pexpire命令，可以设置键的生存时间。其中，expire命令设置的时间单位是秒，pexpire设置的时间单位是毫秒</p><p>expire key seconds<br>pexpire key milliseconds</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; expire name 200 <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; ttl name <br>04 (integer) 196 <br>05 127.0.0.1:6379&gt; pexpire name 300000 <br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; ttl name<br>08 (integer) 297<br></code></pre></td></tr></table></figure><blockquote><p>通过persist命令，能删除键的生存时间，之后该键永不过期。</p><p>persist key</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; set name &#x27;Peter&#x27; ex 200 <br>02 OK <br>03 127.0.0.1:6379&gt; persist name <br>04 (integer) 1 <br>05 127.0.0.1:6379&gt; ttl name <br>06 (integer) -1<br></code></pre></td></tr></table></figure><h2 id="HyperLogLog相关命令"><a href="#HyperLogLog相关命令" class="headerlink" title="HyperLogLog相关命令"></a>HyperLogLog相关命令</h2><p>先通过统计网站访问量的场景来理解基数的概念。例如，在10分 钟内，user1点击了3次某网站的页面，user2点击了4次，user3点击了 2次，user4点击了5次。虽然有多次点击事件，但是访问者的基数是 4，也就是说基数集合里不包含重复的元素。 </p><p>通过Redis的HyperLogLog对象能高效地统计基数。在其他统计基 数的场景里，元素的数量和内存的消耗量是成正比的，但在Redis里每 个HyperLogLog对象大概只需要用12KB的内存就能计算264个元素的基 数。</p><h3 id="用pfadd添加键值对"><a href="#用pfadd添加键值对" class="headerlink" title="用pfadd添加键值对"></a>用pfadd添加键值对</h3><blockquote><p>通过pfadd命令，能把键值对添加到HyperLogLog对象中，添加后即可进行基数统计</p><p>pfadd key element [element …]</p><p>利用HyperLogLog命令可以在一个键上同时添加多个值</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; pfadd Peter Math Computer Piano <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; pfcount Peter #Peter报的培训班数据没有重复，因此第3行用来统计基数的pfcount命令返回的结果是3<br>04 (integer) 3 <br>05 127.0.0.1:6379&gt; pfadd Mary Math Piano Math <br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; pfcount Mary  #Mary报的培训班里Math是重复的，所以第7行统计基数的pfcount命令返回的结果是2。<br>08 (integer) 2<br></code></pre></td></tr></table></figure><p>HyperLogLog其实是Redis里用来统计基数的一个对象，用pfadd命令能向其中添加键值对，并可在此基础上用pfcount命令统计某个键的基数值</p><h3 id="用pfcount统计基数值"><a href="#用pfcount统计基数值" class="headerlink" title="用pfcount统计基数值"></a>用pfcount统计基数值</h3><blockquote><p>用pfcount可以查看一个或多个键的基数</p><p>pfcount key [key …]</p><p>如果对应的key不存在，则返回0</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; pfadd set1 1 2 3 <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; pfadd set2 2 4 5 <br>04 (integer) 1 <br>05 127.0.0.1:6379&gt; pfcount set1 set2 #统计这两个键对应的值里有多少个不重复的数据<br>06 (integer) 5 <br>07 127.0.0.1:6379&gt; pfcount ErrorKey #对应的键ErrorKey不存在，所以返回结果是0<br>08 (integer) 0<br></code></pre></td></tr></table></figure><h3 id="用pfmerge进行合并操作"><a href="#用pfmerge进行合并操作" class="headerlink" title="用pfmerge进行合并操作"></a>用pfmerge进行合并操作</h3><blockquote><p>通过pfmerge命令，能把多个HyperLogLog合并成一个</p><p>pfmerge destkey sourcekey [sourcekey …]</p><p>其中，sourcekey是待合并的对象，可以是一个或多个；destkey是合并后HyperLogLog的键，如果合并前destkey不存在，则会新建一个。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; pfmerge setTotal set1 set2 <br>02 OK <br>03 127.0.0.1:6379&gt; pfcount setTotal <br>04 (integer) 5<br></code></pre></td></tr></table></figure><p>通过第1行的pfmerge命令set1和set2对象合并为setTotal，</p><h3 id="统计网站访问总人数"><a href="#统计网站访问总人数" class="headerlink" title="统计网站访问总人数"></a>统计网站访问总人数</h3><blockquote><p>在网站分析方面有两个统计指标：第一个是统计总访问量，第二 个是统计访问人数。统计总访问量比较好办，每来一次访问加1即可， 而在统计访问人数时需要去除重复，比如某人在某天内访问了100次， 但在统计访问人数时只能算作一次。通过如下的pfadd和pfcount命 令，大家可以掌握用HyperLogLog统计访问人数的做法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; pfadd webSite1 u1 u1 u2 u3 u1 u4 u2 <br>02 (integer) 1 <br>03 127.0.0.1:6379&gt; pfcount webSite1 <br>04 (integer) 4 <br>05 127.0.0.1:6379&gt; pfadd webSite2 u1 u2 u3 u4 u5 u4 u3 u2 <br>06 (integer) 1 <br>07 127.0.0.1:6379&gt; pfcount webSite2 <br>08 (integer) 5 <br>09 127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><p>虽然在第1行和第5行里通过pfadd命令加入的用户名有重复，但是 在第3行和第7行用pfcount统计数量时会去重，统计出不包含重复访问用户名的个数。</p><p>在实际项目里，可能访问列表会很长，用HyperLogLog统计的性能比较快，另外还能用较小的存储空间代价来完成统计访问总人数的工作。</p><h2 id="lua脚本相关命令"><a href="#lua脚本相关命令" class="headerlink" title="lua脚本相关命令"></a>lua脚本相关命令</h2><p>lua是一种比较轻量的脚本语言，可以嵌入应用程序中，能以较小的代价定制功能。在Redis里，也可以通过使用lua脚本来实现特定的效果。 </p><p>lua脚本是一个和Redis独立的技术，不仅能用在Redis里，还能用在其他场景中。本节不会详细讲述它的语法，而会通过范例给出在Redis里使用lua脚本的相关命令。</p><h3 id="把lua脚本装载到缓存里"><a href="#把lua脚本装载到缓存里" class="headerlink" title="把lua脚本装载到缓存里"></a>把lua脚本装载到缓存里</h3><blockquote><p>可以通过script load script命令把lua脚本装载到缓存里，但此时不会执行该脚本，该命令返回的是给定脚本的 SHA1 校验和</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; script load &#x27;return 1+2&#x27; <br>02 &quot;e13c398af9f2658ef7050acf3b266f87cfc2f6ab&quot;<br></code></pre></td></tr></table></figure><p>通过第1行的script load命令，可以把’return 1+2’这段脚本装 载到缓存里，从第2行的输出里能看到该脚本的校验和。随后可以通过 script exists命令来判断指定校验和的脚本是否存在于缓存中，该命令的用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; script exists &quot;e13c398af9f2658ef7050acf3b266f87cfc2f6ab&quot; <br>02 1) (integer) 1<br></code></pre></td></tr></table></figure><h3 id="通过evalsha命令执行缓存中的脚本"><a href="#通过evalsha命令执行缓存中的脚本" class="headerlink" title="通过evalsha命令执行缓存中的脚本"></a>通过evalsha命令执行缓存中的脚本</h3><blockquote><p>可以通过evalsha命令来执行缓存中的脚本</p><p>evalsha sha1 numkeys key [key …] arg [arg …]</p><p>其中，sha1是缓存中脚本的sha1校验和，numkeys是参数的个数， 通过key参数能指定脚本中用到的键，通过arg可以指定脚本的参数。 由于之前创建的脚本仅包含了return语句，参数个数是0，因此可以通过如下命令来执行该脚本。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; evalsha e13c398af9f2658ef7050acf3b266f87cfc2f6ab 0 <br>02 (integer) 3<br></code></pre></td></tr></table></figure><p>第1行evalsha命令的参数是之前装入缓存的lua脚本的sha1校验和，由于该脚本不带参数，所以numkeys参数值是0，从第2行里能看到该脚本返回的结果。</p><h3 id="清空缓存中lua脚本的命令"><a href="#清空缓存中lua脚本的命令" class="headerlink" title="清空缓存中lua脚本的命令"></a>清空缓存中lua脚本的命令</h3><blockquote><p>可以通过script flush命令来清空缓存中所有的lua脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; script exists &quot;e13c398af9f2658ef7050acf3b266f87cfc2f6ab&quot; <br>02 1) (integer) 1 <br>03 127.0.0.1:6379&gt; script flush <br>04 OK <br>05 127.0.0.1:6379&gt; script exists &quot;e13c398af9f2658ef7050acf3b266f87cfc2f6ab&quot; <br>06 1) (integer) 0<br></code></pre></td></tr></table></figure><h3 id="用eval命令执行lua脚本"><a href="#用eval命令执行lua脚本" class="headerlink" title="用eval命令执行lua脚本"></a>用eval命令执行lua脚本</h3><blockquote><p>在之前的范例中，是把lua脚本装载到缓存中并执行。在实际的项目里，还可以通过eval命令来直接运行脚本</p><p>eval script numkeys key [key …] arg [arg …]</p><p>其中，numkeys表示参数的个数，key参数指定脚本中用到的键， arg指定脚本的参数。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; eval &quot;return &#123;KEYS[1],ARGV[1]&#125;&quot; 1 name &#x27;Peter&#x27; <br>02 1) &quot;name&quot; <br>03 2) &quot;Peter&quot;<br></code></pre></td></tr></table></figure><p>在第1行里，通过eval命令运行了双引号里的lua脚本，eval命令 的参数1表示有1个参数，name和’Peter’分别对应于脚本里的KEYS[1] 和ARGV[1]。由于本脚本是通过return语句返回KEYS[1]和ARGV[1]的， 因此在第2行和第3行里能看到打印对应的值。</p><p>当某个脚本出现死循环或者出于其他原因需要终止当前正在运行 的脚本时，可以使用script kill命令，如果当前并没有脚本在运行， 那么执行该命令会看到如下第2行所示的输出结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; script kill <br>02 (error) NOTBUSY No scripts in execution right now.<br></code></pre></td></tr></table></figure><h2 id="排序相关命令"><a href="#排序相关命令" class="headerlink" title="排序相关命令"></a>排序相关命令</h2><p>排序是数据库必备的命令，在Redis这种NoSQL数据库里可以通过本节给出的命令对列表、集合与有序集合等格式的数据进行升序或降序的排列操作。</p><h3 id="用sort命令进行排序"><a href="#用sort命令进行排序" class="headerlink" title="用sort命令进行排序"></a>用sort命令进行排序</h3><blockquote><p>在sort命令里，可以通过asc参数进行升序排列操作，通过desc参数进行降序排列操作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpush salary 10000 15000 13500 12000 <br>02 (integer) 4 <br>03 127.0.0.1:6379&gt; sort salary asc <br>04 1) &quot;10000&quot; <br>05 2) &quot;12000&quot; <br>06 3) &quot;13500&quot; <br>07 4) &quot;15000&quot; <br>08 127.0.0.1:6379&gt; lrange salary 0 -1 <br>09 1) &quot;12000&quot; <br>10 2) &quot;13500&quot; <br>11 3) &quot;15000&quot; <br>12 4) &quot;10000&quot;<br></code></pre></td></tr></table></figure><p>在第1行里，通过lpush命令向键是salary的列表（list）里插入了若干数据，随后通过第3行的sort命令对salary对象进行了升序排列，从第4行到第7行的输出里能看到排序后的结果。排序命令不会对列表本身的数据产生影响，如果通过第8行的lrange命令查看salary列表里所有索引的元素，就会发现其中元素的次序依然是插入时的次序，而不是排序后的顺序。</p><blockquote><p>在如下的范例中，将演示通过sort命令对集合元素进行降序操作的做法。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; sadd name &#x27;Peter&#x27; &#x27;Tom&#x27; &#x27;Mary&#x27; <br>02 (integer) 3 <br>03 127.0.0.1:6379&gt; sort name desc #排序的对象不是数值型元素<br>04 (error) ERR One or more scores can&#x27;t be converted into double <br>05 127.0.0.1:6379&gt; sort name desc alpha  #要对字符串类型的元素排序，需要像第5行那样加上alpha参数<br>06 1) &quot;Tom&quot; <br>07 2) &quot;Peter&quot; <br>08 3) &quot;Mary&quot;<br></code></pre></td></tr></table></figure><p>在有序集合里，同时包含了元素本身和描述元素权重的score，而 sort命令只会针对元素值进行排序。在如下的范例中，演示了用sort 命令对有序集合进行排序的做法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; zadd nameSet 4.0 Mike 2.0 Peter 1.0 Tim 0.5 <br>Johnson <br>02 (integer) 4 <br>03 127.0.0.1:6379&gt; sort nameSet asc alpha <br>04 1) &quot;Johnson&quot; <br>05 2) &quot;Mike&quot; <br>06 3) &quot;Peter&quot; <br>07 4) &quot;Tim&quot; <br>08 127.0.0.1:6379&gt; sort nameSet desc alpha <br>09 1) &quot;Tim&quot; <br>10 2) &quot;Peter&quot; <br>11 3) &quot;Mike&quot; <br>12 4) &quot;Johnson&quot;<br></code></pre></td></tr></table></figure><h3 id="用by参数指定排序模式"><a href="#用by参数指定排序模式" class="headerlink" title="用by参数指定排序模式"></a>用by参数指定排序模式</h3><p>在之前sort相关的范例中，有的是以数值的方式排序的，如果加 上alpha参数，则可以通过字母顺序进行排序，此外还可以通过by参数 设置排序的模式。</p><p>比如用lpush命令向vipLevel的列表里插入若干以VIP开头的数据后，如果想按VIP后面跟着的数字排序，则可以用by参数来指定排序模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpush vipLevel VIP1 VIP3 VIP2 <br>02 (integer) 3 <br>03 127.0.0.1:6379&gt; sort vipLevel by VIP* <br>04 1) &quot;VIP1&quot; <br>05 2) &quot;VIP2&quot; <br>06 3) &quot;VIP3&quot;<br></code></pre></td></tr></table></figure><p>针对通过第1行命令插入的若干数据，在第3行的sort命令里用by VIP*的方式指定了针对VIP后面跟着的数字进行排序。这里是对数字进行排序，所以无须使用alpha参数。</p><h3 id="用limit参数返回部分排序结果"><a href="#用limit参数返回部分排序结果" class="headerlink" title="用limit参数返回部分排序结果"></a>用limit参数返回部分排序结果</h3><blockquote><p>在之前的排序操作里，返回的是排好序的所有元素。在一些场景里，无须返回所有的排序结果，而只需返回部分排好序的元素，此时就可以用limit参数。该参数的语法如下所示，其中offset表示需要跳过的已排序元素的个数，而count表示需要返回元素的个数。</p><p>[LIMIT offset count]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; rpush number 1 3 2 4 6 5 8 7 <br>02 (integer) 8 <br>03 127.0.0.1:6379&gt; sort number limit 0 3 asc <br>04 1) &quot;1&quot; <br>05 2) &quot;2&quot; <br>06 3) &quot;3&quot; <br>07 127.0.0.1:6379&gt; sort number limit 4 2 asc <br>08 1) &quot;5&quot; <br>09 2) &quot;6<br></code></pre></td></tr></table></figure><p>在第1行里，通过rpush命令向键为number的列表里插入了若干数 字。在第3行sort命令的limit参数里，offset值是0，count值是3，表示在排序好的结果里跳过0个元素后返回3个元素，结果如第4行到第6行所示。</p><p>在第7行的limit参数里，offset是4，count是2，表示在升序排序的结果里跳过4个元素，即从元素5开始返回2个元素，该命令的结果如第8行到第9行所示。</p><h3 id="sort命令里get参数的用法"><a href="#sort命令里get参数的用法" class="headerlink" title="sort命令里get参数的用法"></a>sort命令里get参数的用法</h3><p>通过sort命令里的get参数可以用排序的结果作为键，再去获取对 应的值。通过如下的范例，大家能形象地看到get参数的用法.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpush score 100 80 90 85 <br>02 (integer) 4 <br>03 127.0.0.1:6379&gt; set 100 Peter-100 <br>04 OK <br>05 127.0.0.1:6379&gt; set 80 Mary-80 <br>06 OK <br>07 127.0.0.1:6379&gt; set 90 Tim-90 <br>08 OK <br>09 127.0.0.1:6379&gt; set 85 John-85 <br>10 OK <br>11 127.0.0.1:6379&gt; sort score  get * <br>12 1) &quot;Mary-80&quot; <br>13 2) &quot;John-85&quot; <br>14 3) &quot;Tim-90&quot; <br>15 4) &quot;Peter-100&quot;<br></code></pre></td></tr></table></figure><p>请大家注意第11行的sort命令，其中包含了get参数。如果这里不包含get *，就会直接对100、80、90和85这四个值进行排序；加上get *后，则表示用全匹配模式，即用100、80、90和85四个值作为键去找 对应的值，比如第3行设置了100对应的值（Peter-100），找到后对值进行排序。</p><p>不带get *的结果应该是80、85、90和100；包含get * 以后，结果如第12行到第15行所示（其中，Mary-80是80所对应的值，以此类推）。也就是说，如果在sort方法里加入get参数，就会把原本作为排序结果的值当作键，用这些键再去获取值，最终展示这些值的排序结果。在上述范例中，get后面包含的是 * ；在如下的范例中，还能加上其他的模糊匹配模式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; lpush score 100 80 90 85 <br>02 (integer) 4 <br>03 127.0.0.1:6379&gt; set 100_name Peter-100 <br>04 OK <br>05 127.0.0.1:6379&gt; set 80_name Mary-80 <br>06 OK <br>07 127.0.0.1:6379&gt; set 90_name Tim-90 <br>08 OK <br>09 127.0.0.1:6379&gt; set 85_name John-85 <br>10 OK <br>11 127.0.0.1:6379&gt; sort score  get *_name <br>12 1) &quot;Mary-80&quot; <br>13 2) &quot;John-85&quot; <br>14 3) &quot;Tim-90&quot; <br>15 4) &quot;Peter-100&quot;<br></code></pre></td></tr></table></figure><p>在第3行到第9行里，以“分数_name”这样的模式来作为键，比如第3行里分数是100。对应地，在第11行里，get后面的模式就变成了 *_name，其中 * 表示100等分数，这 里用 *_name 作为键再去获取值。</p><p>这里先对分数进行排序，结果是80、85、90和100，然后用 80_name等结果作为键去获取对应的值，比如80_name对应的值是Mary 80，最终结果如第12行到第15行所示。</p><h3 id="通过store参数提升性能"><a href="#通过store参数提升性能" class="headerlink" title="通过store参数提升性能"></a>通过store参数提升性能</h3><p>对于给定的数据对象，如果经常需要用相对固定的模式进行排 序，就可以用store参数来缓存结果，这样每次做相同的排序动作时就 不需要耗费资源从头做起了，可以从缓存中直接得到结果。在如下的 范例中，大家能看到store参数的用法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; sort score desc store score-desc <br>02 (integer) 4 <br>03 127.0.0.1:6379&gt; lrange score-desc 0 -1 <br>04 1) &quot;100&quot; <br>05 2) &quot;90&quot; <br>06 3) &quot;85&quot; <br>07 4) &quot;80&quot; <br>08 127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><p>在第1行里用sort命令对score进行降序排列，同时还用store参数把排序的结果保存到score-desc里，通过第3行的命令能看到缓存结果 score-desc对象中的数据。</p><p>这里数据比较少，缓存的意义可能不明显，如果待排序的数据很多，比如十万级以上，而且会频繁用到排序后的结果，那么用store缓存结果后就能在很大程度上提升系统的性能。</p><h1 id="实践Redis服务器和客户端的操作"><a href="#实践Redis服务器和客户端的操作" class="headerlink" title="实践Redis服务器和客户端的操作"></a>实践Redis服务器和客户端的操作</h1><p>在运行之前章节给出的set等命令前，需要先调用redis-cli命令，让Redis客户端连接到Redis服务器。也就是说，Redis命令的大致运行流程是，由客户端向服务器发起命令，在服务器运行该命令，得到结果后再把结果返回给客户端。</p><p>在实际项目的场景里，一方面可能会通过各种命令观察服务器的配置和运行状态，以此排查和分析实际的问题，另一方面还有可能通过修改各种配置来实现调优的效果。此外，客户端和服务器的对应关系更有可能是一对多的，即多个客户端同时连到一台服务器上。在本章里，将围绕上述实践要点给出Redis服务器和客户端的常用命令以及实践技能。</p><h2 id="Redis服务器管理客户端的命令"><a href="#Redis服务器管理客户端的命令" class="headerlink" title="Redis服务器管理客户端的命令"></a>Redis服务器管理客户端的命令</h2><p>通过redis-cli命令连接到Redis服务器以后，可以通过本节给出的命令来管理该连接对应的客户端，具体包括获取并设置客户端的名字、获取客户端的信息、暂停执行客户端的命令以及关闭该客户端的 连接。</p><h3 id="获取和设置客户端的名字"><a href="#获取和设置客户端的名字" class="headerlink" title="获取和设置客户端的名字"></a>获取和设置客户端的名字</h3><p>可以通过client getname命令来获取客户端的名字，也可以通过 client setname命令来设置客户端的名字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 root@d17f57dbef82:/data# redis-cli <br>02 127.0.0.1:6379&gt; client getname <br>03 (nil) <br>04 127.0.0.1:6379&gt; client setname myName <br>05 OK <br>06 127.0.0.1:6379&gt; client getname <br>07 &quot;myName&quot;<br></code></pre></td></tr></table></figure><p>在第1行里，通过redis-cli命令连接到了Redis服务器，随后通过第2行的client getname命令来获取当前客户端的名字，由于没有设置，因此第3行的输出为空。通过第4行的client setname命令设置客户端的名字为myName后，通过第6行client getname命令可以看到修改后的客户端的名字。</p><h3 id="通过client-list命令查看客户端的信息"><a href="#通过client-list命令查看客户端的信息" class="headerlink" title="通过client list命令查看客户端的信息"></a>通过client list命令查看客户端的信息</h3><p>通过client list命令能看到当前所有连接到服务器的客户端信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; client list <br>02 id=5 addr=127.0.0.1:52914 fd=8 name=myName age=384 idle=0 <br>flags=N db=0 <br>   sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=32742 obl=0 oll=0 <br>omem=0 events=r <br>   cmd=client user=default<br></code></pre></td></tr></table></figure><p>第1行client list命令的返回结果如第2行所示，下面来讲一下项目里需要关注的属性的含义。</p><blockquote><p>id表示客户端的编号。<br>addr表示客户端的地址。<br>age表示客户端的连接时长，单位是秒。<br>idle表示客户端的空闲时常，单位是秒。<br>db表示客户端用到的服务器的数据库索引号，默认每个Redis服务器有16个数据库，且默认会使用0号数据库。<br>cmd表示客户端最近执行的命令。<br>user表示登录服务器用到的用户名。</p></blockquote><p>这里只连接了一个客户端，如果有多个客户端连接，那么该命令 能以多行的形式返回所有的客户端信息</p><h3 id="通过client-pause命令暂停客户端的命令"><a href="#通过client-pause命令暂停客户端的命令" class="headerlink" title="通过client pause命令暂停客户端的命令"></a>通过client pause命令暂停客户端的命令</h3><blockquote><p>如果当前Redis服务器负载过大，就可以通过client pause命令暂停执行来自客户端的命令，该命令的格式如下：</p><p>client pause timeout</p><p>其中，timeout参数表示暂时的时间，单位是毫秒</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 root@d17f57dbef82:/data# redis-cli <br>02 127.0.0.1:6379&gt; client pause 10000 <br>03 OK <br>04 127.0.0.1:6379&gt; set name Peter <br>05 OK <br>06 (4.51s)<br></code></pre></td></tr></table></figure><p>在第1行通过redis-cli命令连接到Redis服务器，在第2行里通过client pause命令让服务器暂停执行来自客户端的命令10秒。</p><p>在第4行中，客户端发起set命令，但不会立即执行，而是等到暂停时间到了以后才继续执行。该命令执行后，第5行表示执行的结果， 在第6行输出该命令暂停的时间。</p><h3 id="通过client-kill命令中断客户端连接"><a href="#通过client-kill命令中断客户端连接" class="headerlink" title="通过client kill命令中断客户端连接"></a>通过client kill命令中断客户端连接</h3><blockquote><p>client kill命令的格式如下：</p><p>client kill [ip : port]</p><p>可以通过ip : port的方式指定待中断的连接.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; client list <br>02 id=5 addr=127.0.0.1:52914 fd=8 name=myName age=2921 <br>idle=1760 flags=N db=0 <br>   sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 <br>events=r cmd=set <br>   user=default <br>03 id=6 addr=127.0.0.1:52916 fd=9 name= age=1825 idle=0 flags=N <br>db=0 sub=0 <br>   psub=0 multi=-1 qbuf=26 qbuf-free=32742 obl=0 oll=0 omem=0 <br>events=r <br>   cmd=client user=default <br>04 127.0.0.1:6379&gt; client kill 127.0.0.1:52914 <br>05 OK <br>06 127.0.0.1:6379&gt; client list <br>07 id=6 addr=127.0.0.1:52916 fd=9 name= age=1889 idle=0 flags=N <br>db=0 sub=0 <br>   psub=0 multi=-1 qbuf=26 qbuf-free=32742 obl=0 oll=0 omem=0 <br>events=r <br>   cmd=client user=default<br></code></pre></td></tr></table></figure><p>通过运行第1行的client list命令，大家能看到连接到Redis服务器的两个客户端，IP地址分别是如第2行所示的127.0.0.1:52914和第3行所示的127.0.0.1:52916。通过第4行的client kill命令能中断指定 IP地址的客户端连接，该命令运行后再运行第6行的client list命令，从第7行的结果里能看到只剩下了一个客户端连接，另一个被终止。</p><blockquote><p>这个命令是中断客户端的连接，而不是中断服务器本身的服务，如果在项目里因各种故障导致无法用客户端连接到Redis服务器，就可能要直接用kill命令终止服务器所在的进程。</p></blockquote><h3 id="通过shutdown命令关闭服务器和客户端"><a href="#通过shutdown命令关闭服务器和客户端" class="headerlink" title="通过shutdown命令关闭服务器和客户端"></a>通过shutdown命令关闭服务器和客户端</h3><p>shutdown命令会终止服务器上的所有客户端连接，并终止服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 root@d17f57dbef82:/data# redis-cli <br>02 127.0.0.1:6379&gt; shutdown <br>03 c:\work&gt;<br></code></pre></td></tr></table></figure><p>从第3行的输出来看，在第2行运行shutdown命令后是直接退出 Docker的。也就是说，通过shutdown命令，不仅能断开所有的客户端连接，还能终止服务器的运行。</p><h2 id="查看Redis服务器的详细信息"><a href="#查看Redis服务器的详细信息" class="headerlink" title="查看Redis服务器的详细信息"></a>查看Redis服务器的详细信息</h2><p>通过本节给出的info等命令，大家不仅能查看服务器的详细信息，还能观察到服务器所包含命令的详细信息。遇到问题时，可以先用info命令查看客户端、CPU和内存等的相关数据，这样或许能看到一 些问题的线索。</p><h3 id="通过info命令查看服务器信息"><a href="#通过info命令查看服务器信息" class="headerlink" title="通过info命令查看服务器信息"></a>通过info命令查看服务器信息</h3><p>通过info命令能查看当前服务器的相关信息，该命令的返回结果比较多，这里只给出描述Server信息部分的返回信息。大家在自己机器上运行后就能看到所有的返回.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; info <br>02 # Server <br>03 redis_version:6.0.1 <br>04 redis_git_sha1:00000000 <br>05 redis_git_dirty:0 <br>06 redis_build_id:4935af324665042b <br>07 redis_mode:standalone <br>08 os:Linux 4.19.76-linuxkit x86_64 <br>09 arch_bits:64<br></code></pre></td></tr></table></figure><p>除了Server部分的信息外，该命令还能返回如下部分的信息</p><blockquote><p>Clients部分包含了已连接的客户端的信息。<br>Memory部分包含了描述Redis服务器内存的相关信息。<br>Persistence部分包含了持久化相关的信息。<br>Stats部分包含了和服务器相关的统计信息，比如执行了多少条命令。<br>Replication部分包含了和数据库主从复制相关的信息。<br>CPU部分包含了Redis服务器所在机器CPU的相关信息。<br>Cluster部分包含了和Redis集群相关的信息。<br>Keyspace部分包含了和Redis数据库相关的统计信息，比如键的数量和超时时间等。</p></blockquote><h3 id="查看客户端连接状况"><a href="#查看客户端连接状况" class="headerlink" title="查看客户端连接状况"></a>查看客户端连接状况</h3><p>在info后面加上Clients参数就能看到客户端的连接状况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; info Clients <br>02 # Clients <br>03 connected_clients:1 <br>04 client_recent_max_input_buffer:2 <br>05 client_recent_max_output_buffer:0 <br>06 blocked_clients:0 <br>07 tracking_clients:0 <br>08 clients_in_timeout_table:0<br></code></pre></td></tr></table></figure><p>通过第1行的info Clients命令能看到如第2行到第8行所示的结果，其中第3行的connected_clients参数表示正在连接的客户端的数量。</p><h3 id="观察最大连接数"><a href="#观察最大连接数" class="headerlink" title="观察最大连接数"></a>观察最大连接数</h3><p>运行info Stat命令，在返回结果里有一项 rejected_connections，表示因超过最大连接数而被拒绝的客户端连接次数，如果该数值很大，就说明有大量的客户端无法连接上，这可能会影响性能。</p><p>对此，可以增大”maxclients”参数。不过通过如下的config get 命令能看到该参数默认数值很大，也就是说，如果不改写maxclients 参数，一般不会造成rejected_connections值大于0的情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; config get maxclients <br>02 1) &quot;maxclients&quot; <br>03 2) &quot;10000&quot;<br></code></pre></td></tr></table></figure><h3 id="查看每秒执行多少条指令"><a href="#查看每秒执行多少条指令" class="headerlink" title="查看每秒执行多少条指令"></a>查看每秒执行多少条指令</h3><p>Redis在内存中缓存数据，如果缓存数据太多，或者大量键没有设 置过期时间（expired time），就会造成内存使用过大，从而导致 OOM 问题。在疑似有内存问题时，可以通过info memory命令观察当前 Redis服务器的内存使用情况，在返回结果里需要关注如下参数指标。</p><blockquote><p>used_memory_human，该参数表示操作系统分配给Redis多少内存。<br>used_memory_peak_human，该参数表示Redis服务器用到的内存峰值。<br>used_memory_lua_human，该参数表示lua脚本所占用的内存用量。<br>used_memory_scripts_human，该参数表示脚本所占用的内存用量。<br>mem_clients_slaves，该参数表示因客户端主从复制而使用的内存用量</p></blockquote><p>如果有内存相关问题，可以先通过used_memory_human和 used_memory_peak_human指标观察当前内存用量和内存峰值，如果值比较大，还可以通过其他指标来观察内存的消耗情况。</p><h3 id="通过command命令查看Redis命令"><a href="#通过command命令查看Redis命令" class="headerlink" title="通过command命令查看Redis命令"></a>通过command命令查看Redis命令</h3><p>command命令会返回Redis命令的信息，下面给出command命令的部 分返回信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; command <br>02 ... <br>03 169) 1) &quot;zadd&quot; <br>04    2) (integer) -4 <br>05    3) 1) write <br>06      2) denyoom <br>07      3) fast <br>08    4) (integer) 1 <br>09    5) (integer) 1 <br>10    6) (integer) 1 <br>11    7) 1) @write <br>12      2) @sortedset <br>13      3) @fast<br></code></pre></td></tr></table></figure><p>第1行运行的command命令会返回该Redis服务器包含的所有命令的信息，比如在第3行到第13行里，返回了编号为169的zadd命令的信息。</p><p>此外，通过command count命令能统计当前Redis服务器命令的个数。下面给出该命令的运行结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; command count <br>02 (integer) 204<br></code></pre></td></tr></table></figure><p>从第2行的输出结果里能看出，当前Redis服务器包含了204个命令。如果要看各命令的明细信息，则可以运行4.2.6节给出的 command 命令。</p><h3 id="查看指定Redis命令的信息"><a href="#查看指定Redis命令的信息" class="headerlink" title="查看指定Redis命令的信息"></a>查看指定Redis命令的信息</h3><blockquote><p>可以通过command info命令查看指定命令的详细信息（可以同时查看多个命令），该命令的格式如下：</p><p>command info key [key…]</p><p>通过如下的命令，能查看set和get这两个命令的详细信息。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; command info set get <br>02 1) 1) &quot;set&quot; <br>03   2) (integer) -3 <br>04   3) 1) write <br>05     2) denyoom <br>06   4) (integer) 1 <br>07   5) (integer) 1 <br>08   6) (integer) 1 <br>09   7) 1) @write <br>10     2) @string <br>11     3) @slow <br>12 2) 1) &quot;get&quot; <br>13   2) (integer) 2 <br>14   3) 1) readonly <br>15     2) fast <br>16   4) (integer) 1 <br>17   5) (integer) 1 <br>18   6) (integer) 1 <br>19   7) 1) @read <br>20     2) @string <br>21     3) @fast<br></code></pre></td></tr></table></figure><p>第1行command info命令后包含了set和get这两个参数，也就是说要查看这两个命令的详细信息。从第2行到第11行返回的是set命令的详细信息，从第12行到第21行返回的是get命令的详细信息。</p><h3 id="获取指定命令的所有键"><a href="#获取指定命令的所有键" class="headerlink" title="获取指定命令的所有键"></a>获取指定命令的所有键</h3><p>通过command getkeys命令能获取指定命令的所有键。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; command getkeys mset name Peter age 18 score 100 <br>02 1) &quot;name&quot; <br>03 2) &quot;age&quot; <br>04 3) &quot;score&quot; <br>05 127.0.0.1:6379&gt; command getkeys set name Mary <br>06 1) &quot;name&quot;<br></code></pre></td></tr></table></figure><p>通过mset能同时设置多个键值对信息。像第1行那样在mset命令前再加上command getkeys命令就能看到mset命令所对应的所有键的信息。该命令的返回结果如第2行到第4行所示，和第1行mset命令对应的设置是完全一致的。 </p><p>第5行给出的set命令只能设置一对键值对，所以加上command getkeys命令只能看到如第6行所示的键，该返回结果也和第5行set命令的参数完全一致。</p><h2 id="查看并修改服务器的常用配置"><a href="#查看并修改服务器的常用配置" class="headerlink" title="查看并修改服务器的常用配置"></a>查看并修改服务器的常用配置</h2><p>之前在启动Redis服务器时用到的都是默认的配置，所以连接密码和端口等参数都是默认的。除此之外，还能通过命令来修改服务器的配置，从而实现基于项目的定制化效果。</p><h3 id="查看服务器的配置"><a href="#查看服务器的配置" class="headerlink" title="查看服务器的配置"></a>查看服务器的配置</h3><p>可以通过config get命令来查看服务器的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 config get * <br>02 config get p*<br></code></pre></td></tr></table></figure><p>通过第1行的命令能看到所有的服务器配置，通过第2行的命令能看到以p开头的配置。也就是说，config get命令支持包含通配符的模糊查询。</p><p>命令config get * 的运行结果很长，这里就不展示了，如果要看详细结果，大家可以自行运行。下面给出的是config get p* 的运行结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; config get p* <br>02 1) &quot;protected-mode&quot; <br>03 2) &quot;no&quot; <br>04 3) &quot;pidfile&quot; <br>05 4) &quot;&quot; <br>06 5) &quot;port&quot; <br>07 6) &quot;6379&quot; <br>08 7) &quot;proto-max-bulk-len&quot; <br>09 8) &quot;536870912&quot; <br></code></pre></td></tr></table></figure><p>从第2行到第9行的运行结果大家能看到以p开头的配置项，其中第5行和第6行是描述端口号的配置项，说明默认的Redis连接端口是 6379。</p><h3 id="通过修改服务器配置设置密码"><a href="#通过修改服务器配置设置密码" class="headerlink" title="通过修改服务器配置设置密码"></a>通过修改服务器配置设置密码</h3><blockquote><p>通过config set命令能修改服务器的配置</p><p>config set key value</p><p>其中，key是待设置的配置项，value是设置后的值。注意，通过该命令修改后的配置项无须重启即可生效。在默认情况下，连接当前Redis服务器无须密码，通过如下代码可以设置连接密码为123456。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; config set requirepass 123456 <br>02 OK<br></code></pre></td></tr></table></figure><p>设置完成后，通过redis-cli连接到服务器，再通过config get * 查看配置，就会提示没有权限，如下面的第3行所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 root@d17f57dbef82:/data# redis-cli <br>02 127.0.0.1:6379&gt; config get * <br>03 (error) NOAUTH Authentication required.<br></code></pre></td></tr></table></figure><p>此时需要通过auth password命令输入密码后才能进行查看和设置 配置项等操作，相关代码如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; auth 123456 <br>02 OK <br>03 127.0.0.1:6379&gt; config get port* <br>04 1) &quot;port&quot; <br>05 2) &quot;6379&quot;<br></code></pre></td></tr></table></figure><p>也就是说，通过config set命令能有效修改Redis服务器的配置， 但是通过config set命令修改的配置值在当前Redis服务器重启后会失效。</p><p>由于本书是在Docker虚拟机环境上运行Redis服务器的，因此通过如下命令重启Redis服务器后，用config set命令设置的配置项会失效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 c:\work&gt;docker stop myFirstRedis <br>02 myFirstRedis <br>03 c:\work&gt;docker start myFirstRedis <br>04 myFirstRedis <br>05 c:\work&gt;docker exec -it myFirstRedis /bin/bash <br>06 root@6fa3794c8899:/data# redis-cli<br></code></pre></td></tr></table></figure><p>这里用第1行和第3行的代码停止并启动了包含Redis的 myFirstRedis容器，从而达到重启Redis服务器的效果。随后通过第5行和第6行的命令连接到Redis服务器，此时再用config get requirepass命令查看密码，就会发现上次的修改已经失效。</p><h3 id="用config-rewrite命令改写Redis配置文件"><a href="#用config-rewrite命令改写Redis配置文件" class="headerlink" title="用config rewrite命令改写Redis配置文件"></a>用config rewrite命令改写Redis配置文件</h3><p>之前已经提到，用config set命令修改的配置项会在Redis服务器 重启后失效，如果想让修改后的配置项一直生效，则需要在config set命令后运行config rewrite命令。</p><p>通过config rewrite命令，可以把修改后的配置项写入 redis.conf 配置文件，所以执行该命令的前提是这个文件存在，如果不存在就会报错，如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">01 127.0.0.1:6379&gt; config set requirepass 123456 <br>02 OK <br>03 127.0.0.1:6379&gt; config rewrite <br>04 (error) ERR The server is running without a config file<br></code></pre></td></tr></table></figure><p>这里在运行完第1行的config set命令后，想要通过第3行的 config rewrite 命令把修改写入redis.conf配置文件，但是此时对应的配置文件不存在，所以会出现第4行所给出的错误提示。</p><p>后文将给出生成redis.conf配置文件的详细步骤，通过这些步骤在启动时加载redis.conf文件后，就能正确地运行config rewrite命令了。</p><h3 id="启动Redis服务器时加载配置文件"><a href="#启动Redis服务器时加载配置文件" class="headerlink" title="启动Redis服务器时加载配置文件"></a>启动Redis服务器时加载配置文件</h3><p>由于我们是在Docker环境里安装的Redis，因此需要通过如下步骤编写redis.conf配置文件，并在启动时加载该文件。</p><blockquote><p>创建D:\work\redis\redisConf目录，并在其中新建 redis.conf。在该文件里，编写如下配置项。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">port</span> <span class="hljs-number">6379</span> <br><span class="hljs-attribute">bind</span> <span class="hljs-number">127.0.0.1</span> <br><span class="hljs-attribute">timeout</span> <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><p>在第1行里设置了Redis服务器的工作端口为6379，在第2行里设置了绑定的IP地址为12.7.0.0.1，这里用的都是默认项，在第3行里设置了超时时间为300秒，即连上的客户端出现300秒空闲后Redis服务器将终止该客户端的连接。</p><p>需要说明的是，放置配置信息的redis.conf文件可以放在其他路径，甚至文件名也可以用其他的。如果改成其他的，在第二步里用docker命令启动Redis服务器时，相关参数也需要对应修改。</p><blockquote><p>通过docker命令，用Redis的镜像创建容器，具体命令如下所示：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name redisWithConfig -v D:\work\redis\redisConf\redis.conf:/redisConfig/redis.conf -p 6379:6379 redis:latest redis-server /redisConfig/redis.conf<br></code></pre></td></tr></table></figure><p>其中，通过–name的方式指定该容器的名字为 redisWithConfig，用-v指定本机和Docker虚拟机内目录和文件的映射关系，具体是把 D:\work\redis\redisConf\redis.conf映射成Docker虚拟机里的redisConfig&#x2F;redis.conf文件，用-p参数来指定Docker 虚拟机的6379端口映射到本机的6379端口上，以 redis:latest的方式指定本容器的镜像为最新版本的Redis 镜像，再用redis-server &#x2F;redisConfig&#x2F;redis.conf的方式 指定启动redisWithConfig镜像时需要运行的命令是redis server &#x2F;redisConfig&#x2F;redis.conf，即用redis-server命令 启动Redis服务器时需要装载对应的redis.conf文件。</p><p>该docker命令的关键点有两个：第一个是在redis-server命 令里指定了需要加载的Redis配置文件，第二个是通过-v参 数把第一步创建的redis.conf文件映射到Docker容器里。运行该命令后，再通过docker ps命令能看到如下结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\32833&gt;docker ps<br>CONTAINER ID   IMAGE          COMMAND                   CREATED         STATUS         PORTS                    NAMES<br>5f3835681a52   redis:latest   &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:6379-&gt;6379/tcp   redisWithConfig<br></code></pre></td></tr></table></figure><p>这说明基于redis : latest镜像的redisWithConfig容器已经成功启动，如果当前该容器不是处于UP状态，那么也可以通过docker start redisWithConfig命令启动该容器。</p><blockquote><p>通过第二步的docker run命令能在启动redisWithConfig容器的同时以加载redis.conf配置文件的方式启动Redis服务器。所以，可以通过docker exec -it redisWithConfig &#x2F;bin&#x2F;bash命令进入该容器。进入后再次通过redis-cli命令连接到Redis服务器时就可以通过config rewrite命令把配置项写入redis.conf里了。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/03/hello-world/"/>
    <url>/2024/12/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
